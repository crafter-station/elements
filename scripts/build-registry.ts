#!/usr/bin/env bun

/**
 * Build registry for distribution (Supabase pattern)
 *
 * This script:
 * 1. Imports registry from registry/index.ts
 * 2. Writes public/r/registry.json (without examples)
 * 3. Generates __registry__/index.tsx for ComponentPreview
 * 4. Runs `shadcn build` to create individual JSON files
 */

import { execSync } from 'node:child_process';
import { existsSync, mkdirSync, writeFileSync } from 'node:fs';
import { join } from 'node:path';

const PUBLIC_REGISTRY_DIR = join(process.cwd(), 'public/r');
const REGISTRY_INDEX_DIR = join(process.cwd(), '__registry__');

function ensureDir(path: string) {
  if (!existsSync(path)) {
    mkdirSync(path, { recursive: true });
  }
}

async function main() {
  console.log('üöÄ Building Elements registry (Supabase pattern)...\n');

  // Step 1: Import registry
  console.log('üìù Step 1: Importing registry...');

  // Dynamic import to get the registry
  const registryModule = await import('../registry/index');
  const registry = registryModule.registry;

  console.log(`   ‚úì Loaded ${registry.items.length} total items`);

  // Step 2: Prepare public registry (filter out examples)
  console.log('\nüì¶ Step 2: Preparing public registry.json...');

  const cleanedRegistry = {
    $schema: 'https://ui.shadcn.com/schema/registry.json',
    ...registry,
    items: registry.items.filter((item: any) => item.type !== 'registry:example'),
  };

  // Ensure directories exist
  ensureDir(PUBLIC_REGISTRY_DIR);
  ensureDir(REGISTRY_INDEX_DIR);

  // Write registry.json
  const registryPath = join(PUBLIC_REGISTRY_DIR, 'registry.json');
  writeFileSync(registryPath, JSON.stringify(cleanedRegistry, null, 2));
  console.log(`   ‚úì Wrote ${registryPath}`);
  console.log(`   ‚úì ${cleanedRegistry.items.length} public components`);

  // Step 3: Generate __registry__/index.tsx for ComponentPreview
  console.log('\nüé® Step 3: Generating __registry__/index.tsx...');

  const exampleComponents = registry.items.filter((item: any) => item.type === 'registry:example');

  const registryIndexContent = `
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index = {
  "default": {
    ${exampleComponents
      .map((item: any) => {
        const componentFile = item.files?.find((file: any) => file.path.endsWith('.tsx'));
        if (!componentFile) return null;

        return `
    "${item.name}": {
      component: React.lazy(() => import("@/${componentFile.path}")),
    }`;
      })
      .filter(Boolean)
      .join(',\n')}
  },
} as const
`;

  const registryIndexPath = join(REGISTRY_INDEX_DIR, 'index.tsx');
  writeFileSync(registryIndexPath, registryIndexContent);
  console.log(`   ‚úì Wrote ${registryIndexPath}`);
  console.log(`   ‚úì ${exampleComponents.length} example components registered`);

  // Step 4: Run shadcn build with the registry.json file
  console.log('\nüî® Step 4: Running shadcn build...');
  try {
    execSync('bunx shadcn@latest build public/r/registry.json', { stdio: 'inherit' });
  } catch (error) {
    console.error('\n‚ùå shadcn build failed');
    console.error('Make sure you have the shadcn package installed:');
    console.error('  bun add -D shadcn@latest');
    process.exit(1);
  }

  console.log('\n‚ú® Registry build complete!');
  console.log(`   üìÅ Public registry: ${PUBLIC_REGISTRY_DIR}`);
  console.log(`   üìÅ Preview registry: ${REGISTRY_INDEX_DIR}`);
  console.log('\n   You can now:');
  console.log('   1. Test locally: npx shadcn add http://localhost:3000/r/clerk-sign-in-shadcn.json');
  console.log('   2. Use ComponentPreview in docs to show examples');
  console.log('   3. Deploy to production and share your registry!');
}

main();
