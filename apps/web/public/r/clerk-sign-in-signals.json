{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clerk-sign-in-signals",
  "type": "registry:ui",
  "title": "Clerk Sign In (Signals)",
  "description": "Advanced sign-in form using Clerk's experimental Signals API with password reset functionality",
  "dependencies": [
    "@clerk/nextjs",
    "@clerk/types",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "alert",
    "card"
  ],
  "files": [
    {
      "path": "../../packages/clerk/registry/clerk/sign-in-signals/sign-in-signals.tsx",
      "content": "\"use client\";\n\nimport Link from \"next/link\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\n\nimport { useSignInSignal } from \"@clerk/clerk-react/experimental\";\nimport { EyeIcon, EyeOffIcon, LoaderIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function SignInSignals({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  const { signIn, errors, fetchStatus } = useSignInSignal();\n  const router = useRouter();\n  const [showPassword, setShowPassword] = useState(false);\n  const [resetMode, setResetMode] = useState(false);\n  const [newPassword, setNewPassword] = useState(\"\");\n\n  const handleSubmit = async (formData: FormData) => {\n    const email = formData.get(\"email\") as string;\n    const password = formData.get(\"password\") as string;\n\n    if (!email || !password) return;\n\n    const { error } = await signIn.password({\n      identifier: email,\n      password: password,\n    });\n\n    if (error) return; // Errors are handled by the global errors object\n\n    if (signIn.status === \"complete\") {\n      await signIn.finalize({\n        navigate: () => {\n          router.push(\"/protected\");\n        },\n      });\n    }\n  };\n\n  const handleForgotPassword = async () => {\n    const email = document.getElementById(\"email\") as HTMLInputElement;\n    if (!email?.value) return;\n\n    const { error } = await signIn.resetPasswordEmailCode.sendCode();\n    if (error) return;\n\n    setResetMode(true);\n  };\n\n  const handleResetPassword = async (formData: FormData) => {\n    const code = formData.get(\"code\") as string;\n\n    if (!code) return;\n\n    const { error: verifyError } =\n      await signIn.resetPasswordEmailCode.verifyCode({ code });\n    if (verifyError) return;\n\n    if (signIn.status === \"needs_new_password\") {\n      const { error: passwordError } =\n        await signIn.resetPasswordEmailCode.submitPassword({\n          password: newPassword,\n        });\n\n      if (passwordError) return;\n    }\n\n    if (signIn.status === \"complete\") {\n      await signIn.finalize({\n        navigate: () => {\n          router.push(\"/protected\");\n        },\n      });\n    }\n  };\n\n  // Reset password flow\n  if (resetMode) {\n    if (signIn.status === \"needs_new_password\") {\n      return (\n        <div className={cn(\"flex flex-col gap-6\", className)} {...props}>\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-xl\">Set new password</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form action={handleResetPassword}>\n                <div className=\"grid gap-6\">\n                  <div className=\"grid gap-3\">\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"newPassword\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                        placeholder=\"••••••••\"\n                        required\n                        className=\"pr-10\"\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? (\n                          <EyeOffIcon className=\"w-4 h-4 text-muted-foreground\" />\n                        ) : (\n                          <EyeIcon className=\"w-4 h-4 text-muted-foreground\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n\n                  {errors.fields.password && (\n                    <Alert variant=\"destructive\">\n                      <AlertDescription>\n                        {errors.fields.password.message}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={fetchStatus === \"fetching\" || !newPassword}\n                  >\n                    {fetchStatus === \"fetching\" ? (\n                      <>\n                        <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Updating...\n                      </>\n                    ) : (\n                      \"Update Password\"\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return (\n      <div className={cn(\"flex flex-col gap-6\", className)} {...props}>\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-xl\">Check your email</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form action={handleResetPassword}>\n              <div className=\"grid gap-6\">\n                <div className=\"grid gap-3\">\n                  <Label htmlFor=\"code\">Verification Code</Label>\n                  <Input\n                    id=\"code\"\n                    name=\"code\"\n                    type=\"text\"\n                    placeholder=\"000000\"\n                    required\n                    maxLength={6}\n                  />\n                </div>\n\n                {errors.fields.code && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>\n                      {errors.fields.code.message}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={fetchStatus === \"fetching\"}\n                >\n                  {fetchStatus === \"fetching\" ? (\n                    <>\n                      <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Verifying...\n                    </>\n                  ) : (\n                    \"Verify Code\"\n                  )}\n                </Button>\n\n                <div className=\"text-center text-sm\">\n                  <button\n                    type=\"button\"\n                    className=\"text-muted-foreground hover:text-foreground underline underline-offset-4\"\n                    onClick={() => setResetMode(false)}\n                  >\n                    Back to sign in\n                  </button>\n                </div>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"flex flex-col gap-6\", className)} {...props}>\n      <Card>\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-xl\">Welcome back</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form action={handleSubmit}>\n            <div className=\"grid gap-6\">\n              <div className=\"grid gap-6\">\n                <div className=\"grid gap-3\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"m@example.com\"\n                    required\n                  />\n                  {errors.fields.identifier && (\n                    <p className=\"text-sm text-destructive\">\n                      {errors.fields.identifier.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"grid gap-3\">\n                  <div className=\"flex items-center\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <button\n                      type=\"button\"\n                      className=\"ml-auto text-sm underline-offset-4 hover:underline\"\n                      onClick={handleForgotPassword}\n                    >\n                      Forgot your password?\n                    </button>\n                  </div>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      name=\"password\"\n                      placeholder=\"••••••••\"\n                      required\n                      className=\"pr-10\"\n                    />\n                    <button\n                      type=\"button\"\n                      className=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? (\n                        <EyeOffIcon className=\"w-4 h-4 text-muted-foreground\" />\n                      ) : (\n                        <EyeIcon className=\"w-4 h-4 text-muted-foreground\" />\n                      )}\n                    </button>\n                  </div>\n                  {errors.fields.password && (\n                    <p className=\"text-sm text-destructive\">\n                      {errors.fields.password.message}\n                    </p>\n                  )}\n                </div>\n\n                {errors.global && errors.global.length > 0 && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>\n                      {String(errors.global[0])}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={fetchStatus === \"fetching\"}\n                >\n                  {fetchStatus === \"fetching\" ? (\n                    <>\n                      <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    \"Sign in\"\n                  )}\n                </Button>\n              </div>\n              <div className=\"text-center text-sm\">\n                Don&apos;t have an account?{\" \"}\n                <Link href=\"/sign-up\" className=\"underline underline-offset-4\">\n                  Sign up\n                </Link>\n              </div>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "app/elements/clerk/sign-in-signals/sign-in-signals.tsx"
    },
    {
      "path": "../../packages/clerk/registry/clerk/sign-in-signals/page.tsx",
      "content": "import SignInSignals from \"./sign-in-signals\";\n\nexport default function SignInSignalsPage() {\n  return (\n    <div className=\"container relative h-screen flex-col items-center justify-center md:grid lg:max-w-none lg:grid-cols-2 lg:px-0\">\n      <div className=\"relative hidden h-full flex-col bg-muted p-10 text-white lg:flex dark:border-r\">\n        <div className=\"absolute inset-0 bg-zinc-900\" />\n        <div className=\"relative z-20 flex items-center text-lg font-medium\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"mr-2 h-6 w-6\"\n          >\n            <title>Acme Logo</title>\n            <path d=\"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3\" />\n          </svg>\n          Acme Inc\n        </div>\n        <div className=\"relative z-20 mt-auto\">\n          <blockquote className=\"space-y-2\">\n            <p className=\"text-lg\">\n              \"This library has saved me countless hours of work and helped me\n              deliver stunning designs to my clients faster than ever before.\"\n            </p>\n            <footer className=\"text-sm\">Sofia Davis</footer>\n          </blockquote>\n        </div>\n      </div>\n      <div className=\"lg:p-8\">\n        <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n          <SignInSignals />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/sign-in-signals/page.tsx"
    },
    {
      "path": "../../packages/clerk/registry/clerk/shared/layout.tsx",
      "content": "import { ClerkProvider } from \"@clerk/nextjs\";\n\nexport default function ClerkLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <ClerkProvider\n      publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY!}\n    >\n      {children}\n    </ClerkProvider>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/layout.tsx"
    }
  ],
  "envVars": {
    "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY": "pk_test_",
    "CLERK_SECRET_KEY": "sk_test_"
  },
  "docs": "⚠️ Experimental: Advanced sign-in form using Clerk's experimental Signals API (@clerk/clerk-react@5.44.0+). Features password reset flow, real-time validation, and enhanced error handling. Requires ClerkProvider in root layout."
}