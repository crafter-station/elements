{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clerk-sign-up-shadcn",
  "type": "registry:ui",
  "title": "Clerk Sign Up (ShadCN)",
  "description": "Complete sign-up form with Clerk integration and CAPTCHA support using custom ShadCN components",
  "dependencies": ["@clerk/nextjs", "@clerk/types"],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "alert",
    "@elements/apple-logo",
    "@elements/linear-logo",
    "@elements/microsoft-logo",
    "@elements/github-logo",
    "@elements/spotify-logo",
    "@elements/slack-logo",
    "@elements/twitch-logo",
    "@elements/twitter-logo",
    "@elements/gitlab-logo",
    "@elements/discord-logo",
    "@elements/notion-logo",
    "@elements/google-logo",
    "@elements/clerk-middleware"
  ],
  "files": [
    {
      "path": "../../packages/clerk/registry/clerk/sign-up-shadcn/sign-up.tsx",
      "content": "\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { useClerk, useSignIn, useSignUp, useUser } from \"@clerk/nextjs\";\nimport { isClerkAPIResponseError } from \"@clerk/nextjs/errors\";\nimport type { OAuthStrategy } from \"@clerk/types\";\nimport { EyeIcon, EyeOffIcon, LoaderIcon } from \"lucide-react\";\n\nimport { ClerkLogo } from \"@/components/clerk-logo\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { AppleLogo } from \"@/components/ui/logos/apple\";\nimport { DiscordLogo } from \"@/components/ui/logos/discord\";\nimport { GitHubLogo } from \"@/components/ui/logos/github\";\nimport { GitLabLogo } from \"@/components/ui/logos/gitlab\";\nimport { GoogleLogo } from \"@/components/ui/logos/google\";\nimport { LinearLogo } from \"@/components/ui/logos/linear\";\nimport { MicrosoftLogo } from \"@/components/ui/logos/microsoft\";\nimport { NotionLogo } from \"@/components/ui/logos/notion\";\nimport { SlackLogo } from \"@/components/ui/logos/slack\";\nimport { SpotifyLogo } from \"@/components/ui/logos/spotify\";\nimport { TwitchLogo } from \"@/components/ui/logos/twitch\";\nimport { TwitterLogo } from \"@/components/ui/logos/twitter\";\n\ninterface SignUpState {\n  isLoading?: boolean;\n  error?: string;\n  step?: \"form\" | \"verify\";\n}\n\nexport function ClerkSignUpShadcn() {\n  const { isLoaded, signUp, setActive } = useSignUp();\n  const { signIn } = useSignIn();\n  const { isSignedIn } = useUser();\n  const clerk = useClerk();\n  const [state, setState] = useState<SignUpState>({ step: \"form\" });\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    username: \"\",\n    password: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [hasSignUpInitialized, setHasSignUpInitialized] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    if (state.error) {\n      const timer = setTimeout(\n        () => setState((prev) => ({ ...prev, error: undefined })),\n        5000,\n      );\n      return () => clearTimeout(timer);\n    }\n  }, [state.error]);\n\n  useEffect(() => {\n    if (\n      isLoaded &&\n      signIn &&\n      !signIn.id &&\n      !signIn.supportedFirstFactors &&\n      !hasInitialized &&\n      !isSignedIn\n    ) {\n      setHasInitialized(true);\n      signIn.create({}).catch((err) => {\n        // Silently handle initialization errors when already signed in\n        if (!err?.errors?.[0]?.message?.includes(\"already signed in\")) {\n          console.error(\"Failed to initialize signIn:\", err);\n        }\n      });\n    }\n  }, [isLoaded, signIn, hasInitialized, isSignedIn]);\n\n  useEffect(() => {\n    if (\n      isLoaded &&\n      signUp &&\n      !signUp.id &&\n      (!signUp.requiredFields || signUp.requiredFields.length === 0) &&\n      !hasSignUpInitialized &&\n      !isSignedIn\n    ) {\n      setHasSignUpInitialized(true);\n      signUp.create({}).catch((err) => {\n        // Silently handle initialization errors when already signed in\n        if (!err?.errors?.[0]?.message?.includes(\"already signed in\")) {\n          console.error(\"Failed to initialize signUp:\", err);\n        }\n      });\n    }\n  }, [isLoaded, signUp, hasSignUpInitialized, isSignedIn]);\n\n  const socialProviders = useMemo(() => {\n    if (!signIn?.supportedFirstFactors) return [];\n    return signIn.supportedFirstFactors.filter((factor) =>\n      factor.strategy.startsWith(\"oauth_\"),\n    );\n  }, [signIn?.supportedFirstFactors]);\n\n  const requiredFields = useMemo(() => {\n    if (!signUp?.requiredFields) return [];\n    return signUp.requiredFields as string[];\n  }, [signUp?.requiredFields]);\n\n  const isFieldRequired = (field: string) => {\n    return requiredFields.includes(field);\n  };\n\n  const shouldShowPasswordField = () => {\n    return isFieldRequired(\"password\") || requiredFields.length === 0;\n  };\n\n  const shouldShowUsernameField = () => {\n    return isFieldRequired(\"username\");\n  };\n\n  const isWaitlistMode = () => {\n    // Better waitlist detection: check for specific waitlist indicators\n    // Waitlist mode is typically indicated by restricted sign-up access\n    // This could be when only email is allowed and other fields are restricted\n    return (\n      (signUp?.status === \"missing_requirements\" &&\n        requiredFields.length === 1 &&\n        requiredFields.includes(\"email_address\") &&\n        !signUp?.emailAddress) || // No email captured yet\n      // Alternative: detect based on sign-up restrictions or settings\n      (signUp?.status === \"abandoned\" && requiredFields.length === 0)\n    );\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isLoaded || !signUp) return;\n\n    setState((prev) => ({ ...prev, isLoading: true, error: undefined }));\n\n    try {\n      const createParams: {\n        firstName?: string;\n        lastName?: string;\n        emailAddress?: string;\n        username?: string;\n        password?: string;\n      } = {};\n\n      if (isFieldRequired(\"firstName\") || requiredFields.length === 0) {\n        createParams.firstName = formData.firstName;\n      }\n      if (isFieldRequired(\"lastName\") || requiredFields.length === 0) {\n        createParams.lastName = formData.lastName;\n      }\n      if (isFieldRequired(\"email_address\") || requiredFields.length === 0) {\n        createParams.emailAddress = formData.email;\n      }\n      if (isFieldRequired(\"username\")) {\n        createParams.username = formData.username;\n      }\n      if (isFieldRequired(\"password\") || requiredFields.length === 0) {\n        createParams.password = formData.password;\n      }\n\n      await signUp.create(createParams);\n\n      // Dynamic verification method detection\n      // Check what verification methods are available\n      if (signUp.unverifiedFields?.includes(\"email_address\")) {\n        // Email needs verification - use email code by default\n        // You could also detect if email links are preferred based on settings\n        try {\n          await signUp.prepareEmailAddressVerification({\n            strategy: \"email_code\",\n          });\n          setState((prev) => ({ ...prev, isLoading: false, step: \"verify\" }));\n        } catch (verifyErr) {\n          // Fallback: try email link if code fails\n          console.warn(\n            \"Email code verification failed, trying email link:\",\n            verifyErr,\n          );\n          // For email link, you'd redirect to a different flow\n        }\n      } else if (signUp.unverifiedFields?.includes(\"phone_number\")) {\n        // Phone verification needed\n        await signUp.preparePhoneNumberVerification({ strategy: \"phone_code\" });\n        setState((prev) => ({ ...prev, isLoading: false, step: \"verify\" }));\n      } else {\n        // No verification needed, user should be ready\n        setState((prev) => ({ ...prev, isLoading: false, step: \"verify\" }));\n      }\n    } catch (err) {\n      let displayError = \"Failed to create account\";\n\n      if (isClerkAPIResponseError(err)) {\n        const clerkError = err.errors[0];\n\n        // Handle specific error codes\n        switch (clerkError.code) {\n          case \"user_locked\": {\n            const lockoutSeconds =\n              (clerkError.meta as Record<string, number>)\n                .lockout_expires_in_seconds || 1800;\n            const unlockTime = new Date(Date.now() + lockoutSeconds * 1000);\n            displayError = `Account locked. Try again at ${unlockTime.toLocaleTimeString()}`;\n            break;\n          }\n          case \"too_many_requests\":\n            displayError =\n              \"Too many attempts. Please wait a moment and try again.\";\n            break;\n          default:\n            displayError =\n              clerkError.longMessage ||\n              clerkError.message ||\n              \"Failed to create account\";\n        }\n      } else {\n        displayError =\n          err instanceof Error ? err.message : \"Failed to create account\";\n      }\n\n      setState((prev) => ({\n        ...prev,\n        isLoading: false,\n        error: displayError,\n      }));\n    }\n  };\n\n  const handleVerification = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isLoaded || !signUp) return;\n\n    setState((prev) => ({ ...prev, isLoading: true, error: undefined }));\n\n    try {\n      const result = await signUp.attemptEmailAddressVerification({\n        code: verificationCode,\n      });\n\n      if (result.status === \"complete\") {\n        await setActive({ session: result.createdSessionId });\n\n        // Note: Session tasks should be checked after setActive completes\n        // For now, redirect to dashboard and handle session tasks there\n\n        router.push(\"/elements/clerk/dashboard\");\n      } else {\n        setState((prev) => ({\n          ...prev,\n          isLoading: false,\n          error: \"Verification incomplete\",\n        }));\n      }\n    } catch (err) {\n      let errorMessage = \"Invalid verification code\";\n\n      if (isClerkAPIResponseError(err)) {\n        const clerkError = err.errors[0];\n        errorMessage =\n          clerkError.longMessage ||\n          clerkError.message ||\n          \"Invalid verification code\";\n      } else {\n        errorMessage =\n          err instanceof Error ? err.message : \"Invalid verification code\";\n      }\n\n      setState((prev) => ({\n        ...prev,\n        isLoading: false,\n        error: errorMessage,\n      }));\n    }\n  };\n\n  const updateFormData = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleSocialSignUp = async (provider: string) => {\n    if (!isLoaded || !signUp) return;\n\n    setState((prev) => ({ ...prev, error: undefined, isLoading: true }));\n\n    try {\n      await signUp.authenticateWithRedirect({\n        strategy: provider as OAuthStrategy,\n        redirectUrl: \"/elements/clerk/sso-callback\",\n        redirectUrlComplete: \"/elements/clerk/dashboard\",\n      });\n    } catch (err) {\n      let errorMessage = `Failed to sign up with ${provider.replace(\"oauth_\", \"\")}`;\n\n      if (isClerkAPIResponseError(err)) {\n        const clerkError = err.errors[0];\n        errorMessage =\n          clerkError.longMessage || clerkError.message || errorMessage;\n      } else {\n        errorMessage = err instanceof Error ? err.message : errorMessage;\n      }\n\n      setState((prev) => ({\n        ...prev,\n        isLoading: false,\n        error: errorMessage,\n      }));\n    }\n  };\n\n  const getSocialIcon = (provider: string) => {\n    switch (provider) {\n      case \"oauth_github\":\n        return <GitHubLogo className=\"w-4 h-4\" />;\n      case \"oauth_google\":\n        return <GoogleLogo className=\"w-4 h-4\" />;\n      case \"oauth_apple\":\n        return <AppleLogo className=\"w-4 h-4\" />;\n      case \"oauth_linear\":\n        return <LinearLogo className=\"w-4 h-4\" />;\n      case \"oauth_microsoft\":\n        return <MicrosoftLogo className=\"w-4 h-4\" />;\n      case \"oauth_spotify\":\n        return <SpotifyLogo className=\"w-4 h-4\" />;\n      case \"oauth_slack\":\n        return <SlackLogo className=\"w-4 h-4\" />;\n      case \"oauth_twitch\":\n        return <TwitchLogo className=\"w-4 h-4\" />;\n      case \"oauth_twitter\":\n      case \"oauth_x\":\n        return <TwitterLogo className=\"w-4 h-4\" />;\n      case \"oauth_gitlab\":\n        return <GitLabLogo className=\"w-4 h-4\" />;\n      case \"oauth_discord\":\n        return <DiscordLogo className=\"w-4 h-4\" />;\n      case \"oauth_notion\":\n        return <NotionLogo className=\"w-4 h-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getProviderLabel = (provider: string) => {\n    return (\n      provider.replace(\"oauth_\", \"\").charAt(0).toUpperCase() +\n      provider.replace(\"oauth_\", \"\").slice(1)\n    );\n  };\n\n  // Show message if already signed in (for showcase purposes)\n  if (isLoaded && isSignedIn) {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n            <h2 className=\"text-lg font-semibold\">Already Signed In</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              You're currently signed in\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={() => router.push(\"/elements/clerk/sso-callback\")}\n              className=\"flex-1\"\n            >\n              Go to Dashboard\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={async () => {\n                await clerk.signOut();\n                window.location.reload();\n              }}\n              className=\"flex-1\"\n            >\n              Sign Out & Try\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"flex items-center justify-center py-8\">\n          <LoaderIcon className=\"w-6 h-6 animate-spin\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (state.step === \"verify\") {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n            <h2 className=\"text-lg font-semibold\">Verify your email</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              We sent a code to {formData.email}\n            </p>\n          </div>\n\n          <form onSubmit={handleVerification} className=\"space-y-3\">\n            <div className=\"space-y-2\">\n              <Label\n                htmlFor=\"verification-code\"\n                className=\"text-sm font-medium\"\n              >\n                Verification code\n              </Label>\n              <Input\n                id=\"verification-code\"\n                type=\"text\"\n                value={verificationCode}\n                onChange={(e) => setVerificationCode(e.target.value)}\n                placeholder=\"Enter 6-digit code\"\n                required\n                disabled={state.isLoading}\n                maxLength={6}\n                autoComplete=\"one-time-code\"\n              />\n            </div>\n\n            {state.error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{state.error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={state.isLoading || verificationCode.length !== 6}\n            >\n              {state.isLoading ? (\n                <>\n                  <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Verifying...\n                </>\n              ) : (\n                \"Verify\"\n              )}\n            </Button>\n\n            <div className=\"text-center\">\n              <button\n                type=\"button\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                onClick={() =>\n                  signUp?.prepareEmailAddressVerification({\n                    strategy: \"email_code\",\n                  })\n                }\n                disabled={state.isLoading}\n              >\n                Resend code\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card relative\">\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n            <h2 className=\"text-lg font-semibold\">Create account</h2>\n            <p className=\"text-sm text-muted-foreground\">Get started today</p>\n          </div>\n\n          {socialProviders.length > 0 && (\n            <div className=\"space-y-3\">\n              {socialProviders.map((provider) => (\n                <Button\n                  key={provider.strategy}\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => handleSocialSignUp(provider.strategy)}\n                  disabled={state.isLoading}\n                >\n                  {getSocialIcon(provider.strategy)}\n                  <span className=\"ml-2\">\n                    Continue with {getProviderLabel(provider.strategy)}\n                  </span>\n                </Button>\n              ))}\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-card px-2 text-muted-foreground\">Or</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            {(isFieldRequired(\"firstName\") ||\n              isFieldRequired(\"lastName\") ||\n              requiredFields.length === 0) && (\n              <div className=\"grid grid-cols-2 gap-2\">\n                {(isFieldRequired(\"firstName\") ||\n                  requiredFields.length === 0) && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\" className=\"text-sm font-medium\">\n                      First name\n                    </Label>\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      value={formData.firstName}\n                      onChange={(e) =>\n                        updateFormData(\"firstName\", e.target.value)\n                      }\n                      placeholder=\"John\"\n                      required={\n                        isFieldRequired(\"firstName\") ||\n                        requiredFields.length === 0\n                      }\n                      disabled={state.isLoading}\n                      autoComplete=\"given-name\"\n                    />\n                  </div>\n                )}\n                {(isFieldRequired(\"lastName\") ||\n                  requiredFields.length === 0) && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\" className=\"text-sm font-medium\">\n                      Last name\n                    </Label>\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      value={formData.lastName}\n                      onChange={(e) =>\n                        updateFormData(\"lastName\", e.target.value)\n                      }\n                      placeholder=\"Doe\"\n                      required={\n                        isFieldRequired(\"lastName\") ||\n                        requiredFields.length === 0\n                      }\n                      disabled={state.isLoading}\n                      autoComplete=\"family-name\"\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {(isFieldRequired(\"email_address\") ||\n              requiredFields.length === 0) && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => updateFormData(\"email\", e.target.value)}\n                  placeholder=\"you@company.com\"\n                  required={\n                    isFieldRequired(\"email_address\") ||\n                    requiredFields.length === 0\n                  }\n                  disabled={state.isLoading}\n                  autoComplete=\"email\"\n                />\n              </div>\n            )}\n\n            {shouldShowUsernameField() && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"text-sm font-medium\">\n                  Username\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={formData.username}\n                  onChange={(e) => updateFormData(\"username\", e.target.value)}\n                  placeholder=\"johndoe\"\n                  required={isFieldRequired(\"username\")}\n                  disabled={state.isLoading}\n                  autoComplete=\"username\"\n                />\n              </div>\n            )}\n\n            {shouldShowPasswordField() && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={formData.password}\n                    onChange={(e) => updateFormData(\"password\", e.target.value)}\n                    placeholder=\"••••••••\"\n                    required={\n                      isFieldRequired(\"password\") || requiredFields.length === 0\n                    }\n                    disabled={state.isLoading}\n                    autoComplete=\"new-password\"\n                    className=\"pr-10\"\n                    minLength={8}\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOffIcon className=\"w-4 h-4 text-muted-foreground\" />\n                    ) : (\n                      <EyeIcon className=\"w-4 h-4 text-muted-foreground\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {state.error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{state.error}</AlertDescription>\n              </Alert>\n            )}\n\n            {/* CAPTCHA Widget - Required for Smart CAPTCHA */}\n            <div id=\"clerk-captcha\"></div>\n\n            <Button type=\"submit\" className=\"w-full\" disabled={state.isLoading}>\n              {state.isLoading ? (\n                <>\n                  <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                \"Create account\"\n              )}\n            </Button>\n          </form>\n        </div>\n\n        {/* Waitlist Backdrop Overlay */}\n        {isWaitlistMode() && (\n          <div className=\"absolute inset-0 bg-background/80 flex items-center justify-center rounded-lg\">\n            <div className=\"text-center px-4\">\n              <p className=\"font-medium text-foreground\">\n                Waitlist mode is enabled\n              </p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Change the config in Clerk if you want to use it\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "app/elements/clerk/sign-up/sign-up.tsx"
    },
    {
      "path": "../../packages/clerk/registry/clerk/sign-up-shadcn/page.tsx",
      "content": "import { ClerkSignUpShadcn } from \"@/app/elements/clerk/sign-up/sign-up\";\n\nexport default function SignUpTestPage() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-2xl font-bold\">Sign Up Test</h1>\n          <p className=\"text-muted-foreground\">\n            Test your sign-up element with Clerk integration\n          </p>\n        </div>\n\n        <div className=\"bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3 text-sm\">\n          <p className=\"font-medium text-amber-800 dark:text-amber-200 mb-1\">\n            ⚠️ Setup Required\n          </p>\n          <p className=\"text-amber-700 dark:text-amber-300 text-xs\">\n            Wrap your root layout with{\" \"}\n            <code className=\"bg-amber-100 dark:bg-amber-900/40 px-1 rounded text-xs\">\n              &lt;ClerkProvider&gt;\n            </code>{\" \"}\n            and configure your API keys for this component to work.\n          </p>\n        </div>\n\n        <ClerkSignUpShadcn />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/sign-up/page.tsx"
    },
    {
      "path": "../../packages/clerk/registry/clerk/shared/dashboard/page.tsx",
      "content": "\"use client\";\n\nimport { SignOutButton, useUser } from \"@clerk/nextjs\";\nimport { CheckCircleIcon, LogOutIcon } from \"lucide-react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\nexport default function DashboardPage() {\n  const { user, isLoaded } = useUser();\n\n  if (!isLoaded) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-2\">\n              <h1 className=\"text-xl font-semibold\">Access Denied</h1>\n              <p className=\"text-muted-foreground text-sm\">\n                Please sign in to access the dashboard\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage\n                    src={user.imageUrl}\n                    alt={user.firstName || \"User\"}\n                  />\n                  <AvatarFallback>\n                    {user.firstName?.[0]}\n                    {user.lastName?.[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <CardTitle className=\"text-xl\">\n                    Welcome, {user.firstName || user.username || \"User\"}!\n                  </CardTitle>\n                  <CardDescription>\n                    You successfully signed in with Clerk\n                  </CardDescription>\n                </div>\n              </div>\n              <SignOutButton>\n                <Button variant=\"outline\" size=\"sm\">\n                  <LogOutIcon className=\"w-4 h-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </SignOutButton>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Success Message */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircleIcon className=\"w-6 h-6 text-green-500\" />\n              <div>\n                <h3 className=\"font-semibold text-green-700 dark:text-green-400\">\n                  Authentication Successful\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your Clerk authentication components are working correctly\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>User Information</CardTitle>\n            <CardDescription>Information retrieved from Clerk</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium text-muted-foreground\">Name:</span>\n                <p>\n                  {user.fullName ||\n                    `${user.firstName || \"\"} ${user.lastName || \"\"}`.trim() ||\n                    \"Not provided\"}\n                </p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  Username:\n                </span>\n                <p>{user.username || \"Not provided\"}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  Email:\n                </span>\n                <p>\n                  {user.primaryEmailAddress?.emailAddress || \"Not provided\"}\n                </p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  Phone:\n                </span>\n                <p>{user.primaryPhoneNumber?.phoneNumber || \"Not provided\"}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  User ID:\n                </span>\n                <p className=\"font-mono text-xs\">{user.id}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  Created:\n                </span>\n                <p>\n                  {user.createdAt\n                    ? new Date(user.createdAt).toLocaleDateString()\n                    : \"Unknown\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Steps */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Next Steps</CardTitle>\n            <CardDescription>\n              Ready to customize your authentication flow\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>\n                  Customize the sign-in and sign-up components to match your\n                  design\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>\n                  Update the redirect URLs in your components to point to your\n                  actual dashboard\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>\n                  Add additional authentication features like organization\n                  management\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Configure your Clerk webhooks for user management</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/dashboard/page.tsx"
    },
    {
      "path": "../../packages/clerk/registry/clerk/shared/sso-callback/page.tsx",
      "content": "import { AuthenticateWithRedirectCallback } from \"@clerk/nextjs\";\n\nexport default function SSOCallbackPage() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center space-y-4 p-8\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-muted border-t-primary mx-auto\"></div>\n        <div>\n          <h2 className=\"text-lg font-semibold mb-2\">\n            Completing authentication\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Please wait while we securely sign you in...\n          </p>\n        </div>\n        <AuthenticateWithRedirectCallback\n          signInForceRedirectUrl=\"/elements/clerk/dashboard\"\n          signUpForceRedirectUrl=\"/elements/clerk/dashboard\"\n          signInFallbackRedirectUrl=\"/elements/clerk/dashboard\"\n          signUpFallbackRedirectUrl=\"/elements/clerk/dashboard\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/sso-callback/page.tsx"
    }
  ],
  "envVars": {
    "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY": "pk_test_",
    "CLERK_SECRET_KEY": "sk_test_"
  },
  "docs": "Complete sign-up form with OAuth providers, email verification, and CAPTCHA support using custom ShadCN components. Requires ClerkProvider in root layout."
}
