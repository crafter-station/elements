{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tinte",
  "type": "registry:ui",
  "title": "Tinte",
  "description": "AI-powered theme editor for shadcn/ui with semantic color palettes in OKLCH color space",
  "dependencies": [
    "culori",
    "@uiw/react-color",
    "@uiw/color-convert",
    "lucide-react",
    "sonner"
  ],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "../../packages/tinte/registry/tinte/theme-editor.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport { useChat } from \"@ai-sdk/react\";\nimport { DefaultChatTransport } from \"ai\";\nimport { formatHex, oklch } from \"culori\";\nimport { RefreshCw } from \"lucide-react\";\n\nimport { ChatInput } from \"./chat/chat-input\";\nimport { Message } from \"./chat/message\";\nimport { ColorInput } from \"./color-input\";\nimport Logo from \"./logo\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"./ui/accordion\";\nimport { Button } from \"./ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"./ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Textarea } from \"./ui/textarea\";\n\ntype ShadcnTokens = Record<string, string>;\n\ninterface ShadcnTheme {\n  light: ShadcnTokens;\n  dark: ShadcnTokens;\n}\n\n// Token groups for organized UI\nconst TOKEN_GROUPS = [\n  {\n    label: \"Background & Text\",\n    tokens: [\"background\", \"foreground\", \"muted\", \"muted-foreground\"],\n  },\n  {\n    label: \"Cards & Surfaces\",\n    tokens: [\"card\", \"card-foreground\", \"popover\", \"popover-foreground\"],\n  },\n  {\n    label: \"Interactive Elements\",\n    tokens: [\n      \"primary\",\n      \"primary-foreground\",\n      \"secondary\",\n      \"secondary-foreground\",\n      \"accent\",\n      \"accent-foreground\",\n    ],\n  },\n  {\n    label: \"Forms & States\",\n    tokens: [\n      \"border\",\n      \"input\",\n      \"ring\",\n      \"destructive\",\n      \"destructive-foreground\",\n    ],\n  },\n  {\n    label: \"Charts\",\n    tokens: [\"chart-1\", \"chart-2\", \"chart-3\", \"chart-4\", \"chart-5\"],\n  },\n  {\n    label: \"Sidebar\",\n    tokens: [\n      \"sidebar-background\",\n      \"sidebar-foreground\",\n      \"sidebar-primary\",\n      \"sidebar-primary-foreground\",\n      \"sidebar-accent\",\n      \"sidebar-accent-foreground\",\n      \"sidebar-border\",\n      \"sidebar-ring\",\n    ],\n  },\n] as const;\n\ninterface ThemeEditorProps {\n  onChange?: (theme: ShadcnTheme) => void;\n}\n\nexport default function ThemeEditor({ onChange }: ThemeEditorProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [theme, setTheme] = useState<ShadcnTheme>({ light: {}, dark: {} });\n  const [_originalFormats, setOriginalFormats] = useState<\n    Record<string, Record<string, string>>\n  >({ light: {}, dark: {} });\n  const [mode, setMode] = useState<\"light\" | \"dark\">(\"light\");\n  const [loading, setLoading] = useState(false);\n  const [rawCss, setRawCss] = useState(\"\");\n\n  // Chat functionality\n  const { messages, sendMessage, status } = useChat({\n    transport: new DefaultChatTransport({\n      api: \"/api/tinte/chat\",\n    }),\n    onError: (error) => {\n      console.error(\"Chat error:\", error);\n    },\n  });\n\n  // Handle theme application from the Message component\n  const handleApplyTheme = useCallback(\n    (newTheme: { light: ShadcnTokens; dark: ShadcnTokens }) => {\n      console.log(\"Applying theme:\", newTheme);\n\n      setTheme(newTheme);\n      onChange?.(newTheme);\n\n      // Update original formats\n      setOriginalFormats({\n        light: { ...newTheme.light },\n        dark: { ...newTheme.dark },\n      });\n    },\n    [onChange],\n  );\n\n  // Detect color format\n  const detectColorFormat = useCallback(\n    (colorValue: string): \"hex\" | \"oklch\" | \"rgb\" | \"hsl\" | \"unknown\" => {\n      const trimmed = colorValue.trim();\n      if (trimmed.startsWith(\"#\")) return \"hex\";\n      if (trimmed.startsWith(\"oklch(\")) return \"oklch\";\n      if (trimmed.startsWith(\"rgb(\")) return \"rgb\";\n      if (trimmed.startsWith(\"hsl(\")) return \"hsl\";\n      return \"unknown\";\n    },\n    [],\n  );\n\n  // Convert any color to hex for color picker\n  const _convertToHex = useCallback((colorValue: string): string => {\n    try {\n      const trimmed = colorValue.trim();\n\n      // If it's already hex, return it\n      if (trimmed.startsWith(\"#\")) {\n        return trimmed;\n      }\n\n      // For oklch, rgb, hsl - use culori to convert\n      const colorObj = oklch(trimmed);\n      if (colorObj) {\n        const hex = formatHex(colorObj);\n        return hex || \"#000000\";\n      }\n\n      return \"#000000\";\n    } catch {\n      return \"#000000\";\n    }\n  }, []);\n\n  // Convert hex back to original format\n  const _convertFromHex = useCallback(\n    (hexColor: string, originalValue: string): string => {\n      try {\n        const format = detectColorFormat(originalValue);\n\n        switch (format) {\n          case \"hex\":\n            return hexColor;\n\n          case \"oklch\": {\n            const oklchColor = oklch(hexColor);\n            if (oklchColor) {\n              const l = oklchColor.l || 0;\n              const c = oklchColor.c || 0;\n              const h = oklchColor.h || 0;\n\n              // Match the original format style\n              if (originalValue.includes(\" / \")) {\n                // Handle alpha values like \"oklch(1 0 0 / 10%)\"\n                const alphaMatch = originalValue.match(/\\/\\s*([\\d.]+%?)/);\n                const alpha = alphaMatch ? ` / ${alphaMatch[1]}` : \"\";\n                return `oklch(${l.toFixed(3)} ${c.toFixed(3)} ${h.toFixed(3)}${alpha})`;\n              }\n              return `oklch(${l.toFixed(3)} ${c.toFixed(3)} ${h.toFixed(3)})`;\n            }\n            return originalValue;\n          }\n\n          default:\n            return hexColor;\n        }\n      } catch {\n        return originalValue;\n      }\n    },\n    [detectColorFormat],\n  );\n\n  // Load theme from globals.css\n  const loadTheme = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"/api/tinte/read-globals\");\n      if (response.ok) {\n        const data = await response.json();\n        setTheme(data.theme);\n\n        // Store original formats for each token\n        const lightFormats: Record<string, string> = {};\n        const darkFormats: Record<string, string> = {};\n\n        Object.entries(data.theme.light).forEach(([key, value]) => {\n          lightFormats[key] = value as string;\n        });\n\n        Object.entries(data.theme.dark).forEach(([key, value]) => {\n          darkFormats[key] = value as string;\n        });\n\n        setOriginalFormats({ light: lightFormats, dark: darkFormats });\n      } else {\n        console.error(\"Failed to load theme from globals.css\");\n      }\n    } catch (error) {\n      console.error(\"Error loading theme:\", error);\n    }\n    setLoading(false);\n  }, []);\n\n  // Initialize theme\n  useEffect(() => {\n    const root = document.documentElement;\n    const isDark = root.classList.contains(\"dark\");\n    setMode(isDark ? \"dark\" : \"light\");\n    loadTheme();\n  }, [loadTheme]);\n\n  const handleTokenEdit = useCallback(\n    (token: string, newValue: string) => {\n      setTheme((prev) => {\n        const updated = {\n          ...prev,\n          [mode]: {\n            ...prev[mode],\n            [token]: newValue,\n          },\n        };\n\n        onChange?.(updated);\n        return updated;\n      });\n\n      // Update original formats with new value\n      setOriginalFormats((prev) => ({\n        ...prev,\n        [mode]: {\n          ...prev[mode],\n          [token]: newValue,\n        },\n      }));\n    },\n    [mode, onChange],\n  );\n\n  // Sync mode with DOM changes (controlled by next-themes)\n  useEffect(() => {\n    const observer = new MutationObserver(() => {\n      const isDark = document.documentElement.classList.contains(\"dark\");\n      setMode(isDark ? \"dark\" : \"light\");\n    });\n\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    return () => observer.disconnect();\n  }, []);\n\n  // Generate raw CSS from theme\n  const generateRawCss = useCallback(() => {\n    const lightTokens = Object.entries(theme.light)\n      .map(([key, value]) => `  --${key}: ${value};`)\n      .join(\"\\n\");\n\n    const darkTokens = Object.entries(theme.dark)\n      .map(([key, value]) => `  --${key}: ${value};`)\n      .join(\"\\n\");\n\n    if (!lightTokens && !darkTokens) return \"\";\n\n    return `:root {\\n${lightTokens}\\n}\\n\\n.dark {\\n${darkTokens}\\n}`;\n  }, [theme]);\n\n  // Parse raw CSS and update theme\n  const parseRawCss = useCallback(\n    (css: string) => {\n      try {\n        const light: ShadcnTokens = {};\n        const dark: ShadcnTokens = {};\n\n        // Match :root block\n        const rootMatch = css.match(/:root\\s*\\{([^}]+)\\}/);\n        if (rootMatch) {\n          const rootContent = rootMatch[1];\n          const variableMatches = rootContent.matchAll(\n            /--([^:]+):\\s*([^;]+);/g,\n          );\n          for (const match of variableMatches) {\n            const key = match[1].trim();\n            const value = match[2].trim();\n            light[key] = value;\n          }\n        }\n\n        // Match .dark block\n        const darkMatch = css.match(/\\.dark\\s*\\{([^}]+)\\}/);\n        if (darkMatch) {\n          const darkContent = darkMatch[1];\n          const variableMatches = darkContent.matchAll(\n            /--([^:]+):\\s*([^;]+);/g,\n          );\n          for (const match of variableMatches) {\n            const key = match[1].trim();\n            const value = match[2].trim();\n            dark[key] = value;\n          }\n        }\n\n        setTheme({ light, dark });\n        onChange?.({ light, dark });\n      } catch (error) {\n        console.error(\"Failed to parse CSS:\", error);\n      }\n    },\n    [onChange],\n  );\n\n  // Update raw CSS when theme changes\n  useEffect(() => {\n    setRawCss(generateRawCss());\n  }, [theme, generateRawCss]);\n\n  // Write to globals.css file\n  const [saveStatus, setSaveStatus] = useState<\n    \"idle\" | \"saving\" | \"success\" | \"error\"\n  >(\"idle\");\n\n  const writeToGlobals = useCallback(async () => {\n    setSaveStatus(\"saving\");\n    try {\n      const lightTokens = Object.entries(theme.light)\n        .map(([key, value]) => `  --${key}: ${value};`)\n        .join(\"\\n\");\n\n      const darkTokens = Object.entries(theme.dark)\n        .map(([key, value]) => `  --${key}: ${value};`)\n        .join(\"\\n\");\n\n      const cssContent = `:root {\\n${lightTokens}\\n}\\n\\n.dark {\\n${darkTokens}\\n}`;\n\n      const response = await fetch(\"/api/tinte/write-globals\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ css: cssContent }),\n      });\n\n      if (response.ok) {\n        setSaveStatus(\"success\");\n        setTimeout(() => setSaveStatus(\"idle\"), 2000);\n      } else {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to write globals.css\");\n      }\n    } catch (error) {\n      console.error(\"Failed to write globals.css:\", error);\n      setSaveStatus(\"error\");\n      setTimeout(() => setSaveStatus(\"idle\"), 3000);\n    }\n  }, [theme]);\n\n  const availableTokens = TOKEN_GROUPS.flatMap((group) =>\n    group.tokens.filter((token) => theme[mode][token] !== undefined),\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      {/* Floating Ball Trigger */}\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <DialogTrigger asChild>\n          <button\n            type=\"button\"\n            className=\"w-14 h-14 bg-card border-2 border-border rounded-full shadow-lg hover:scale-110 transition-all duration-200 flex items-center justify-center hover:shadow-xl\"\n            title=\"Open Theme Editor\"\n          >\n            <Logo size={28} className=\"drop-shadow-sm\" />\n          </button>\n        </DialogTrigger>\n      </div>\n\n      {/* Dialog Content */}\n      <DialogContent showCloseButton={false}>\n        {/* Header */}\n        <DialogHeader>\n          <div className=\"flex items-center gap-3\">\n            <Logo size={24} />\n            <div>\n              <DialogTitle>Theme Editor</DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Live editing • {availableTokens.length} tokens • {mode} mode\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <button\n              type=\"button\"\n              onClick={loadTheme}\n              disabled={loading}\n              className=\"p-1.5 hover:bg-accent rounded-md transition-colors disabled:opacity-50\"\n              title=\"Reload from globals.css\"\n            >\n              <RefreshCw size={16} className={loading ? \"animate-spin\" : \"\"} />\n            </button>\n            <span className=\"px-3 py-1.5 text-sm text-muted-foreground border border-border rounded-md\">\n              Editing: {mode === \"light\" ? \"☀️ Light\" : \"🌙 Dark\"}\n            </span>\n            <button\n              type=\"button\"\n              onClick={writeToGlobals}\n              disabled={saveStatus === \"saving\"}\n              className=\"px-3 py-1.5 text-sm bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {saveStatus === \"saving\" && \"Saving...\"}\n              {saveStatus === \"success\" && \"✅ Saved!\"}\n              {saveStatus === \"error\" && \"❌ Error\"}\n              {saveStatus === \"idle\" && \"Save CSS\"}\n            </button>\n          </div>\n        </DialogHeader>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden flex flex-col\">\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <RefreshCw className=\"animate-spin mr-2\" size={20} />\n              <span>Loading theme...</span>\n            </div>\n          ) : (\n            <Tabs\n              defaultValue=\"editor\"\n              className=\"flex-1 flex flex-col overflow-hidden\"\n            >\n              <TabsList className=\"mx-4 mt-4 mb-4\">\n                <TabsTrigger value=\"editor\">Editor</TabsTrigger>\n                <TabsTrigger value=\"raw\">Raw CSS</TabsTrigger>\n                <TabsTrigger value=\"agent\">Agent</TabsTrigger>\n              </TabsList>\n\n              <TabsContent\n                value=\"editor\"\n                className=\"flex-1 h-0 flex flex-col overflow-hidden px-4 pb-4\"\n              >\n                <div className=\"flex-1 border rounded-md bg-muted/20 overflow-y-auto p-4\">\n                  <Accordion\n                    type=\"single\"\n                    collapsible\n                    className=\"w-full space-y-2\"\n                    defaultValue=\"Background & Text\"\n                  >\n                    {TOKEN_GROUPS.map((group) => {\n                      const groupTokens = group.tokens.filter(\n                        (token) => theme[mode][token] !== undefined,\n                      );\n                      if (groupTokens.length === 0) return null;\n\n                      return (\n                        <AccordionItem\n                          value={group.label}\n                          key={group.label}\n                          className=\"rounded-md border bg-background px-4 py-1 outline-none last:border-b has-focus-visible:border-ring has-focus-visible:ring-[3px] has-focus-visible:ring-ring/50\"\n                        >\n                          <AccordionTrigger className=\"py-2 text-[15px] leading-6 hover:no-underline focus-visible:ring-0\">\n                            <span className=\"uppercase tracking-wide\">\n                              {group.label} ({groupTokens.length})\n                            </span>\n                          </AccordionTrigger>\n                          <AccordionContent className=\"pb-2\">\n                            <div className=\"grid gap-3 sm:grid-cols-2\">\n                              {groupTokens.map((token) => (\n                                <div key={token} className=\"space-y-1.5\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                                      {token.replace(/-/g, \" \")}\n                                    </span>\n                                    <span className=\"text-xs text-muted-foreground font-mono\">\n                                      {detectColorFormat(theme[mode][token])}\n                                    </span>\n                                  </div>\n                                  <ColorInput\n                                    value={theme[mode][token]}\n                                    onChange={(color) =>\n                                      handleTokenEdit(token, color)\n                                    }\n                                    label={token}\n                                  />\n                                </div>\n                              ))}\n                            </div>\n                          </AccordionContent>\n                        </AccordionItem>\n                      );\n                    })}\n                  </Accordion>\n                </div>\n              </TabsContent>\n\n              <TabsContent\n                value=\"raw\"\n                className=\"flex-1 h-0 flex flex-col overflow-hidden px-4 pb-4\"\n              >\n                <Textarea\n                  value={rawCss}\n                  onChange={(e) => {\n                    setRawCss(e.target.value);\n                    parseRawCss(e.target.value);\n                  }}\n                  className=\"w-full bg-muted/40 font-mono text-xs resize-none border border-border focus-visible:ring-0 p-4\"\n                  placeholder=\"Paste your CSS here...\"\n                  spellCheck={false}\n                  rows={25}\n                />\n              </TabsContent>\n\n              <TabsContent\n                value=\"agent\"\n                className=\"flex-1 h-0 flex flex-col gap-3 overflow-hidden px-4 pb-4\"\n              >\n                <div className=\"flex-1 border rounded-md bg-muted/20 overflow-y-auto p-4 space-y-2\">\n                  {messages.length === 0 ? (\n                    <div className=\"flex flex-col items-center justify-center min-h-[380px] gap-6\">\n                      <div className=\"text-center space-y-2\">\n                        <h3 className=\"font-semibold text-lg\">\n                          AI Theme Generator\n                        </h3>\n                        <p className=\"text-muted-foreground text-sm max-w-md\">\n                          Describe your ideal theme and let AI generate a\n                          complete color palette for you\n                        </p>\n                      </div>\n                      <div className=\"grid gap-2 w-full max-w-md px-4\">\n                        <p className=\"text-xs text-muted-foreground uppercase tracking-wide font-medium\">\n                          Suggested prompts:\n                        </p>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() =>\n                            sendMessage({\n                              text: \"Create a purple theme with high contrast for accessibility\",\n                            })\n                          }\n                          className=\"justify-start h-auto py-3 whitespace-normal text-left\"\n                        >\n                          Create a purple theme with high contrast\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() =>\n                            sendMessage({\n                              text: \"Generate a warm autumn theme with orange and brown tones\",\n                            })\n                          }\n                          className=\"justify-start h-auto py-3 whitespace-normal text-left\"\n                        >\n                          Generate a warm autumn theme\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() =>\n                            sendMessage({\n                              text: \"Create a modern dark theme with blue accents\",\n                            })\n                          }\n                          className=\"justify-start h-auto py-3 whitespace-normal text-left\"\n                        >\n                          Create a modern dark theme with blue accents\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() =>\n                            sendMessage({\n                              text: \"Design a soft pastel theme perfect for a wellness app\",\n                            })\n                          }\n                          className=\"justify-start h-auto py-3 whitespace-normal text-left\"\n                        >\n                          Design a soft pastel wellness theme\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    messages.map((message) => (\n                      <Message\n                        key={message.id}\n                        message={message}\n                        onApplyTheme={handleApplyTheme}\n                      />\n                    ))\n                  )}\n                </div>\n                <ChatInput\n                  onSubmit={(msg) => {\n                    sendMessage({ text: msg });\n                  }}\n                  disabled={status === \"submitted\" || status === \"streaming\"}\n                />\n              </TabsContent>\n            </Tabs>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tinte/theme-editor.tsx"
    },
    {
      "path": "../../packages/tinte/registry/tinte/color-input.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { hexToHsva, hsvaToHex } from \"@uiw/color-convert\";\nimport { Colorful } from \"@uiw/react-color\";\nimport { hsl as culoriHsl, formatHex, lch, oklch, rgb } from \"culori\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface ColorInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  label: string;\n  disabled?: boolean;\n}\n\nconst getContrastColor = (hexColor: string): string => {\n  const hex = hexColor.replace(\"#\", \"\");\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n  const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n  return brightness > 128 ? \"#000000\" : \"#ffffff\";\n};\n\nconst toHex = (colorValue: string): string => {\n  try {\n    if (colorValue.startsWith(\"#\")) return colorValue;\n    if (colorValue.startsWith(\"oklch(\")) {\n      const parsed = oklch(colorValue);\n      return parsed ? formatHex(parsed) : \"#000000\";\n    }\n    if (colorValue.startsWith(\"lch(\")) {\n      const parsed = lch(colorValue);\n      return parsed ? formatHex(parsed) : \"#000000\";\n    }\n    if (colorValue.startsWith(\"hsl(\")) {\n      const parsed = culoriHsl(colorValue);\n      return parsed ? formatHex(parsed) : \"#000000\";\n    }\n    if (colorValue.startsWith(\"rgb(\")) {\n      const parsed = rgb(colorValue);\n      return parsed ? formatHex(parsed) : \"#000000\";\n    }\n    return \"#000000\";\n  } catch {\n    return \"#000000\";\n  }\n};\n\nconst detectFormat = (\n  colorValue: string,\n): \"hex\" | \"rgb\" | \"hsl\" | \"oklch\" | \"lch\" => {\n  if (colorValue.startsWith(\"oklch(\")) return \"oklch\";\n  if (colorValue.startsWith(\"lch(\")) return \"lch\";\n  if (colorValue.startsWith(\"hsl(\")) return \"hsl\";\n  if (colorValue.startsWith(\"rgb(\")) return \"rgb\";\n  return \"hex\";\n};\n\nconst fromHex = (\n  hexValue: string,\n  format: \"hex\" | \"rgb\" | \"hsl\" | \"oklch\" | \"lch\",\n): string => {\n  try {\n    const rgbColor = rgb(hexValue);\n    if (!rgbColor) return hexValue;\n    switch (format) {\n      case \"hex\":\n        return hexValue;\n      case \"rgb\": {\n        const r = Math.round(rgbColor.r * 255);\n        const g = Math.round(rgbColor.g * 255);\n        const b = Math.round(rgbColor.b * 255);\n        return `rgb(${r} ${g} ${b})`;\n      }\n      case \"hsl\": {\n        const hslColor = culoriHsl(hexValue);\n        if (!hslColor) return hexValue;\n        const h = Math.round(hslColor.h || 0);\n        const s = Math.round((hslColor.s || 0) * 100);\n        const l = Math.round((hslColor.l || 0) * 100);\n        return `hsl(${h} ${s}% ${l}%)`;\n      }\n      case \"oklch\": {\n        const oklchColor = oklch(hexValue);\n        if (!oklchColor) return hexValue;\n        const l = (oklchColor.l || 0).toFixed(3);\n        const c = (oklchColor.c || 0).toFixed(3);\n        const h = Math.round(oklchColor.h || 0);\n        return `oklch(${l} ${c} ${h})`;\n      }\n      case \"lch\": {\n        const lchColor = lch(hexValue);\n        if (!lchColor) return hexValue;\n        const l = Math.round(lchColor.l || 0);\n        const c = Math.round(lchColor.c || 0);\n        const h = Math.round(lchColor.h || 0);\n        return `lch(${l} ${c} ${h})`;\n      }\n      default:\n        return hexValue;\n    }\n  } catch {\n    return hexValue;\n  }\n};\n\nexport function ColorInput({\n  value,\n  onChange,\n  label,\n  disabled = false,\n}: ColorInputProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n  const [activeTab, setActiveTab] = useState(\"hex\");\n  const originalFormat = useMemo(() => detectFormat(value), [value]);\n\n  useEffect(() => {\n    setInputValue(value);\n  }, [value]);\n\n  const hexColor = useMemo(() => toHex(inputValue), [inputValue]);\n  const contrastColor = useMemo(() => {\n    if (!/^#[0-9A-Fa-f]{6}$/.test(hexColor)) return \"#000000\";\n    return getContrastColor(hexColor);\n  }, [hexColor]);\n\n  const colorValues = useMemo(() => {\n    if (!/^#[0-9A-Fa-f]{6}$/.test(hexColor)) {\n      return {\n        hex: \"#000000\",\n        rgb: { r: 0, g: 0, b: 0 },\n        hsl: { h: 0, s: 0, l: 0 },\n        oklch: { l: 0, c: 0, h: 0 },\n        lch: { l: 0, c: 0, h: 0 },\n      };\n    }\n    const rgbColor = rgb(hexColor);\n    const hslColor = culoriHsl(hexColor);\n    const oklchColor = oklch(hexColor);\n    const lchColor = lch(hexColor);\n    return {\n      hex: hexColor,\n      rgb: rgbColor\n        ? {\n            r: Math.round(rgbColor.r * 255),\n            g: Math.round(rgbColor.g * 255),\n            b: Math.round(rgbColor.b * 255),\n          }\n        : { r: 0, g: 0, b: 0 },\n      hsl: hslColor\n        ? {\n            h: Math.round(hslColor.h || 0),\n            s: Math.round((hslColor.s || 0) * 100),\n            l: Math.round((hslColor.l || 0) * 100),\n          }\n        : { h: 0, s: 0, l: 0 },\n      oklch: oklchColor\n        ? {\n            l: Math.round((oklchColor.l || 0) * 100),\n            c: Math.round((oklchColor.c || 0) * 100),\n            h: Math.round(oklchColor.h || 0),\n          }\n        : { l: 0, c: 0, h: 0 },\n      lch: lchColor\n        ? {\n            l: Math.round(lchColor.l || 0),\n            c: Math.round(lchColor.c || 0),\n            h: Math.round(lchColor.h || 0),\n          }\n        : { l: 0, c: 0, h: 0 },\n    };\n  }, [hexColor]);\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = e.target.value;\n      setInputValue(newValue);\n      if (/^#[0-9A-Fa-f]{6}$/.test(newValue)) {\n        onChange(fromHex(newValue, originalFormat));\n      }\n    },\n    [onChange, originalFormat],\n  );\n\n  const handleInputBlur = useCallback(() => {\n    if (!/^#[0-9A-Fa-f]{6}$/.test(inputValue)) {\n      setInputValue(value);\n    }\n  }, [inputValue, value]);\n\n  const handleColorfulChange = useCallback(\n    (newColor: { hsva: { h: number; s: number; v: number; a: number } }) => {\n      const hex = hsvaToHex(newColor.hsva);\n      setInputValue(hex);\n      onChange(fromHex(hex, originalFormat));\n    },\n    [onChange, originalFormat],\n  );\n\n  const handleQuickColorClick = useCallback(\n    (quickColor: string) => {\n      setInputValue(quickColor);\n      onChange(fromHex(quickColor, originalFormat));\n    },\n    [onChange, originalFormat],\n  );\n\n  const handleColorSpaceChange = useCallback(\n    (values: Record<string, number>, colorSpace: string) => {\n      let newHex: string | undefined;\n      switch (colorSpace) {\n        case \"rgb\":\n          newHex = formatHex(\n            rgb({\n              mode: \"rgb\",\n              r: values.r / 255,\n              g: values.g / 255,\n              b: values.b / 255,\n            }),\n          );\n          break;\n        case \"hsl\":\n          newHex = formatHex(\n            culoriHsl({\n              mode: \"hsl\",\n              h: values.h,\n              s: values.s / 100,\n              l: values.l / 100,\n            }),\n          );\n          break;\n        case \"oklch\":\n          newHex = formatHex(\n            oklch({\n              mode: \"oklch\",\n              l: values.l / 100,\n              c: values.c / 100,\n              h: values.h,\n            }),\n          );\n          break;\n        case \"lch\":\n          newHex = formatHex(\n            lch({ mode: \"lch\", l: values.l, c: values.c, h: values.h }),\n          );\n          break;\n        default:\n          return;\n      }\n      if (newHex && /^#[0-9A-Fa-f]{6}$/.test(newHex)) {\n        setInputValue(newHex);\n        onChange(fromHex(newHex, originalFormat));\n      }\n    },\n    [onChange, originalFormat],\n  );\n\n  const hsvaColor = useMemo(() => {\n    if (!/^#[0-9A-Fa-f]{6}$/.test(hexColor)) {\n      return { h: 0, s: 0, v: 0, a: 1 };\n    }\n    return hexToHsva(hexColor);\n  }, [hexColor]);\n\n  const quickColors = useMemo(\n    () => [\n      \"#000000\",\n      \"#ffffff\",\n      \"#ef4444\",\n      \"#22c55e\",\n      \"#3b82f6\",\n      \"#f59e0b\",\n      \"#a855f7\",\n      \"#ec4899\",\n    ],\n    [],\n  );\n\n  return (\n    <div className=\"flex items-center gap-3 py-2\">\n      <Popover\n        open={isOpen && !disabled}\n        onOpenChange={(open) => !disabled && setIsOpen(open)}\n      >\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            className={cn(\n              \"h-10 justify-between font-mono text-sm w-full\",\n              disabled && \"opacity-50 cursor-not-allowed\",\n            )}\n            disabled={disabled}\n            style={{ backgroundColor: hexColor, color: contrastColor }}\n          >\n            <span className=\"truncate\">{inputValue}</span>\n            <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-70\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[320px] p-0\" align=\"end\" sideOffset={8}>\n          <div className=\"p-4 space-y-4\">\n            <Colorful\n              color={hsvaColor}\n              onChange={handleColorfulChange}\n              disableAlpha={true}\n              style={{ width: \"100%\" }}\n            />\n\n            <Tabs\n              value={activeTab}\n              onValueChange={setActiveTab}\n              className=\"w-full\"\n            >\n              <TabsList className=\"grid w-full grid-cols-5 h-9\">\n                <TabsTrigger value=\"hex\" className=\"text-xs\">\n                  HEX\n                </TabsTrigger>\n                <TabsTrigger value=\"rgb\" className=\"text-xs\">\n                  RGB\n                </TabsTrigger>\n                <TabsTrigger value=\"hsl\" className=\"text-xs\">\n                  HSL\n                </TabsTrigger>\n                <TabsTrigger value=\"oklch\" className=\"text-xs\">\n                  OKLCH\n                </TabsTrigger>\n                <TabsTrigger value=\"lch\" className=\"text-xs\">\n                  LCH\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"hex\" className=\"mt-3 space-y-0\">\n                <Input\n                  value={inputValue}\n                  onChange={handleInputChange}\n                  onBlur={handleInputBlur}\n                  placeholder=\"#000000\"\n                  className=\"font-mono text-sm h-9\"\n                  disabled={disabled}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"rgb\" className=\"mt-3 space-y-0\">\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">R</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.rgb.r}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.rgb, r: Number(e.target.value) },\n                          \"rgb\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"255\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">G</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.rgb.g}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.rgb, g: Number(e.target.value) },\n                          \"rgb\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"255\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">B</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.rgb.b}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.rgb, b: Number(e.target.value) },\n                          \"rgb\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"255\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"hsl\" className=\"mt-3 space-y-0\">\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">H</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.hsl.h}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.hsl, h: Number(e.target.value) },\n                          \"hsl\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"360\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">S</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.hsl.s}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.hsl, s: Number(e.target.value) },\n                          \"hsl\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"100\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">L</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.hsl.l}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.hsl, l: Number(e.target.value) },\n                          \"hsl\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"100\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"oklch\" className=\"mt-3 space-y-0\">\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">L</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.oklch.l}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.oklch, l: Number(e.target.value) },\n                          \"oklch\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.1\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">C</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.oklch.c}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.oklch, c: Number(e.target.value) },\n                          \"oklch\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.1\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">H</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.oklch.h}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.oklch, h: Number(e.target.value) },\n                          \"oklch\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"360\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"lch\" className=\"mt-3 space-y-0\">\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">L</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.lch.l}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.lch, l: Number(e.target.value) },\n                          \"lch\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"100\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">C</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.lch.c}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.lch, c: Number(e.target.value) },\n                          \"lch\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"150\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-1.5\">\n                    <Label className=\"text-xs text-muted-foreground\">H</Label>\n                    <Input\n                      type=\"number\"\n                      value={colorValues.lch.h}\n                      onChange={(e) =>\n                        handleColorSpaceChange(\n                          { ...colorValues.lch, h: Number(e.target.value) },\n                          \"lch\",\n                        )\n                      }\n                      min=\"0\"\n                      max=\"360\"\n                      className=\"h-9 text-sm\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-xs text-muted-foreground\">\n                Quick Colors\n              </Label>\n              <div className=\"grid grid-cols-8 gap-2\">\n                {quickColors.map((quickColor) => (\n                  <button\n                    key={quickColor}\n                    type=\"button\"\n                    className=\"w-full aspect-square rounded border-2 border-border hover:border-foreground hover:scale-110 transition-all\"\n                    style={{ backgroundColor: quickColor }}\n                    onClick={() => handleQuickColorClick(quickColor)}\n                    disabled={disabled}\n                    aria-label={`Quick color ${quickColor}`}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tinte/color-input.tsx"
    },
    {
      "path": "../../packages/tinte/registry/tinte/logo.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\ninterface LogoProps {\n  size?: number;\n  className?: string;\n}\n\nexport default function Logo({ size = 40, className }: LogoProps) {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 1024 1024\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"rounded-sm\", className)}\n    >\n      <title>Tinte Logo</title>\n      <g clipPath=\"url(#clip0_171_409)\">\n        <path\n          d=\"M0 0C337.92 0 675.84 0 1024 0C1024 337.92 1024 675.84 1024 1024C686.08 1024 348.16 1024 0 1024C0 686.08 0 348.16 0 0Z\"\n          fill=\"var(--foreground)\"\n        />\n        <path\n          d=\"M447.047 196C471.321 196 495.594 196 520.604 196C519.575 202.51 518.547 209.019 517.487 215.726C514.254 236.204 511.036 256.684 507.825 277.165C507.61 278.533 507.395 279.902 507.174 281.311C506.755 283.988 506.335 286.665 505.915 289.341C505.519 291.869 505.123 294.397 504.725 296.925C503.917 302.081 503.112 307.238 502.348 312.401C502.131 313.867 501.913 315.334 501.689 316.845C501.514 318.052 501.339 319.259 501.159 320.502C500.656 323.244 500.656 323.244 499.409 325.739C550.837 325.739 602.264 325.739 655.249 325.739C653.622 342.837 651.562 359.9 649.016 376.886C571.258 377.503 571.258 377.503 491.929 378.133C490.695 390.483 489.461 402.833 488.189 415.558C487.116 423.814 486.007 432.045 484.761 440.274C484.444 442.407 484.128 444.541 483.812 446.675C481.101 464.814 480.027 484.793 477.792 502.258C474.119 530.95 473.775 557.722 479.462 571.494C482.605 579.106 492.147 591.425 504.396 593.948C567.979 607.047 662.067 544.987 717.585 497.892C718.958 496.735 720.332 495.579 721.705 494.422C724.512 492.056 727.312 489.683 730.106 487.303C732.256 485.476 734.412 483.656 736.583 481.855C740.76 478.373 744.282 474.835 747.507 470.447C748.329 470.859 749.152 471.27 750 471.695C749.29 472.707 749.29 472.707 748.566 473.739C743.957 480.46 740.23 487.259 736.754 494.617C719.772 529.467 694.881 559.74 667.337 586.8C664.967 589.155 664.967 589.155 662.106 592.779C658.848 596.61 655.361 599.707 651.543 602.959C649.202 605.012 647.044 607.143 644.886 609.386C639.189 615.137 632.947 620.158 626.575 625.136C625.685 625.831 624.795 626.527 623.878 627.244C574.676 665.477 518.89 692.289 455.774 693.747C519.83 712.095 571.594 699.683 628.911 668.489C662.295 649.76 693.178 626.006 721.81 600.692C724.927 597.971 728.11 595.336 731.299 592.701C720.877 614.472 705.753 634.362 690.587 653.013C688.988 654.981 687.405 656.962 685.823 658.944C677.286 669.411 667.801 678.956 658.288 688.523C657.296 689.526 657.296 689.526 656.283 690.55C647.63 699.275 638.715 707.318 629.068 714.955C627.503 716.247 625.941 717.542 624.383 718.843C607.293 732.927 588.724 744.438 569.226 754.874C568.425 755.307 567.623 755.739 566.798 756.184C545.319 767.681 523.185 774.748 499.409 779.824C498.334 780.07 497.259 780.316 496.151 780.569C491.934 781.281 487.7 781.524 483.436 781.773C482.572 781.827 481.708 781.881 480.818 781.936C478.704 782.068 476.59 782.194 474.475 782.319C484.059 783.663 493.571 783.799 503.229 783.798C505.932 783.8 508.634 783.823 511.336 783.847C575.66 784.117 634.555 750.269 685.171 713.707C685.993 714.119 686.816 714.53 687.664 714.955C685.561 717.451 683.457 719.945 681.353 722.44C680.772 723.129 680.191 723.819 679.592 724.53C663.545 743.536 646.714 761.371 626.575 776.081C625.521 776.866 624.466 777.651 623.38 778.459C570.548 816.717 503.685 834.153 439.135 824.286C405.466 818.583 373.312 801.171 353.003 773.318C312.72 715.278 327.498 638.954 337.404 573.876C339.7 558.786 341.846 543.675 343.974 528.56C347.794 501.469 351.795 474.408 355.943 447.366C356.342 444.762 356.739 442.159 357.136 439.555C359.617 423.306 362.144 407.069 365.056 390.891C365.261 389.748 365.465 388.605 365.676 387.428C365.866 386.394 366.057 385.36 366.253 384.296C366.417 383.4 366.582 382.505 366.752 381.582C367.257 379.381 367.257 379.381 368.504 376.886C337.648 376.886 306.791 376.886 275 376.886C281.234 338.214 281.234 338.214 282.48 333.224C285.162 331.919 285.162 331.919 288.729 330.948C290.705 330.384 290.705 330.384 292.722 329.808C294.15 329.417 295.579 329.026 297.051 328.623C335.303 317.479 369.611 301.121 398.425 273.344C399.304 272.543 400.183 271.743 401.089 270.917C418.819 254.292 428.916 232.399 439.567 210.97C442.035 206.03 444.504 201.09 447.047 196Z\"\n          fill=\"var(--background)\"\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_171_409\">\n          <rect width=\"1024\" height=\"1024\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tinte/logo.tsx"
    },
    {
      "path": "../../packages/tinte/registry/tinte/api/read-globals/route.ts",
      "content": "import { readFile } from \"node:fs/promises\";\nimport { join } from \"node:path\";\n\nimport { NextResponse } from \"next/server\";\n\nexport async function GET() {\n  try {\n    const globalsPath = join(process.cwd(), \"app\", \"globals.css\");\n    const content = await readFile(globalsPath, \"utf-8\");\n\n    return NextResponse.json({ success: true, content });\n  } catch (error) {\n    console.error(\"Error reading globals.css:\", error);\n    return NextResponse.json(\n      { success: false, error: \"Failed to read globals.css\" },\n      { status: 500 },\n    );\n  }\n}\n",
      "type": "registry:lib",
      "target": "app/api/tinte/read-globals/route.ts"
    },
    {
      "path": "../../packages/tinte/registry/tinte/api/write-globals/route.ts",
      "content": "import { writeFile } from \"node:fs/promises\";\nimport { join } from \"node:path\";\n\nimport { NextResponse } from \"next/server\";\n\nexport async function POST(request: Request) {\n  try {\n    const { content } = await request.json();\n\n    if (typeof content !== \"string\") {\n      return NextResponse.json(\n        { success: false, error: \"Invalid content\" },\n        { status: 400 },\n      );\n    }\n\n    const globalsPath = join(process.cwd(), \"app\", \"globals.css\");\n    await writeFile(globalsPath, content, \"utf-8\");\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Error writing globals.css:\", error);\n    return NextResponse.json(\n      { success: false, error: \"Failed to write globals.css\" },\n      { status: 500 },\n    );\n  }\n}\n",
      "type": "registry:lib",
      "target": "app/api/tinte/write-globals/route.ts"
    }
  ],
  "docs": "Live theme editor with floating ball UI that allows editing shadcn/ui design tokens in real-time. Supports HEX, RGB, HSL, OKLCH, and LCH color formats with automatic format preservation. Features organized token groups, light/dark mode switching, and live CSS updates. Requires app/globals.css to be writable."
}
