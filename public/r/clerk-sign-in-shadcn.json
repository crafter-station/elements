{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clerk-sign-in-shadcn",
  "type": "registry:ui",
  "title": "Clerk Sign In (ShadCN)",
  "description": "Complete sign-in form with Clerk integration using custom ShadCN components",
  "dependencies": ["@clerk/nextjs", "@clerk/types"],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "alert",
    "card",
    "avatar",
    "@elements/apple-logo",
    "@elements/linear-logo",
    "@elements/microsoft-logo",
    "@elements/github-logo",
    "@elements/spotify-logo",
    "@elements/slack-logo",
    "@elements/twitch-logo",
    "@elements/twitter-logo",
    "@elements/gitlab-logo",
    "@elements/discord-logo",
    "@elements/notion-logo",
    "@elements/google-logo",
    "@elements/clerk-middleware"
  ],
  "files": [
    {
      "path": "registry/default/elements/clerk/sign-in.tsx",
      "content": "\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { useClerk, useSignIn, useUser } from \"@clerk/nextjs\";\nimport { isClerkAPIResponseError } from \"@clerk/nextjs/errors\";\nimport type { OAuthStrategy } from \"@clerk/types\";\nimport { EyeIcon, EyeOffIcon, LoaderIcon } from \"lucide-react\";\n\nimport { ClerkLogo } from \"@/components/clerk-logo\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { AppleLogo } from \"@/components/ui/logos/apple\";\nimport { DiscordLogo } from \"@/components/ui/logos/discord\";\nimport { GitHubLogo } from \"@/components/ui/logos/github\";\nimport { GitLabLogo } from \"@/components/ui/logos/gitlab\";\nimport { GoogleLogo } from \"@/components/ui/logos/google\";\nimport { LinearLogo } from \"@/components/ui/logos/linear\";\nimport { MicrosoftLogo } from \"@/components/ui/logos/microsoft\";\nimport { NotionLogo } from \"@/components/ui/logos/notion\";\nimport { SlackLogo } from \"@/components/ui/logos/slack\";\nimport { SpotifyLogo } from \"@/components/ui/logos/spotify\";\nimport { TwitchLogo } from \"@/components/ui/logos/twitch\";\nimport { TwitterLogo } from \"@/components/ui/logos/twitter\";\n\ninterface SignInState {\n  step: \"form\" | \"mfa\";\n  mfaFactors?: { strategy: \"phone_code\" | \"totp\" | \"backup_code\" }[];\n}\n\nexport function ClerkSignInElement() {\n  const { isLoaded, signIn, setActive } = useSignIn();\n  const { isSignedIn } = useUser();\n  const clerk = useClerk();\n  const [identifier, setIdentifier] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [state, setState] = useState<SignInState>({ step: \"form\" });\n  const [mfaCode, setMfaCode] = useState(\"\");\n  const router = useRouter();\n\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => setError(\"\"), 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  useEffect(() => {\n    if (isLoaded && signIn && !signIn.id && !hasInitialized && !isSignedIn) {\n      setHasInitialized(true);\n      signIn.create({}).catch((err) => {\n        // Silently handle initialization errors when already signed in\n        if (!err?.errors?.[0]?.message?.includes(\"already signed in\")) {\n          console.error(\"Failed to initialize signIn:\", err);\n        }\n      });\n    }\n  }, [isLoaded, signIn, hasInitialized, isSignedIn]);\n\n  const socialProviders = useMemo(() => {\n    if (!signIn?.supportedFirstFactors) return [];\n    return signIn.supportedFirstFactors.filter((factor) =>\n      factor.strategy.startsWith(\"oauth_\"),\n    );\n  }, [signIn?.supportedFirstFactors]);\n\n  const supportedIdentifiers = useMemo(() => {\n    if (!signIn?.supportedIdentifiers) return [];\n    return signIn.supportedIdentifiers;\n  }, [signIn?.supportedIdentifiers]);\n\n  const getIdentifierType = () => {\n    if (\n      supportedIdentifiers.includes(\"email_address\") &&\n      supportedIdentifiers.includes(\"username\")\n    ) {\n      return \"email_or_username\";\n    }\n    if (supportedIdentifiers.includes(\"email_address\")) {\n      return \"email\";\n    }\n    if (supportedIdentifiers.includes(\"username\")) {\n      return \"username\";\n    }\n    return \"email\";\n  };\n\n  const getIdentifierLabel = () => {\n    const type = getIdentifierType();\n    switch (type) {\n      case \"email_or_username\":\n        return \"Email or username\";\n      case \"username\":\n        return \"Username\";\n      default:\n        return \"Email\";\n    }\n  };\n\n  const getIdentifierPlaceholder = () => {\n    const type = getIdentifierType();\n    switch (type) {\n      case \"email_or_username\":\n        return \"you@company.com or username\";\n      case \"username\":\n        return \"username\";\n      default:\n        return \"you@company.com\";\n    }\n  };\n\n  const getIdentifierInputType = () => {\n    const type = getIdentifierType();\n    return type === \"email\" ? \"email\" : \"text\";\n  };\n\n  const handleMfaSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!isLoaded || !signIn || !mfaCode) return;\n\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      // Use the first available MFA factor (could be TOTP, SMS, etc.)\n      const mfaFactor = state.mfaFactors?.[0];\n      if (!mfaFactor) {\n        setError(\"No MFA factors available\");\n        return;\n      }\n\n      const result = await signIn.attemptSecondFactor({\n        strategy: mfaFactor.strategy,\n        code: mfaCode,\n      });\n\n      if (result.status === \"complete\") {\n        await setActive({ session: result.createdSessionId });\n        router.push(\"/0-dashboard\");\n      } else {\n        setError(`MFA verification incomplete: ${result.status}`);\n      }\n    } catch (err) {\n      let displayError = \"Invalid MFA code\";\n      if (isClerkAPIResponseError(err)) {\n        const clerkError = err.errors[0];\n        displayError =\n          clerkError.longMessage || clerkError.message || \"Invalid MFA code\";\n      }\n      setError(displayError);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isLoaded || isLoading) return;\n\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const result = await signIn.create({\n        identifier: identifier,\n        password,\n      });\n\n      if (result.status === \"complete\") {\n        await setActive({ session: result.createdSessionId });\n\n        // Note: Session tasks should be checked after setActive completes\n        // For now, we redirect to dashboard and let the app handle session tasks\n        router.push(\"/0-dashboard\");\n      } else if (result.status === \"needs_second_factor\") {\n        setState({\n          step: \"mfa\",\n          mfaFactors: result.supportedSecondFactors || [],\n        });\n        setIsLoading(false);\n        return;\n      } else {\n        // Handle other incomplete statuses\n        setError(`Sign-in incomplete: ${result.status}`);\n      }\n    } catch (err) {\n      let displayError = \"Failed to sign in\";\n\n      if (isClerkAPIResponseError(err)) {\n        const clerkError = err.errors[0];\n\n        switch (clerkError.code) {\n          case \"user_locked\": {\n            const lockoutSeconds =\n              (clerkError.meta as Record<string, number>)\n                .lockout_expires_in_seconds || 1800;\n            const unlockTime = new Date(Date.now() + lockoutSeconds * 1000);\n            displayError = `Account locked. Try again at ${unlockTime.toLocaleTimeString()}`;\n            break;\n          }\n          case \"too_many_requests\":\n            displayError =\n              \"Too many attempts. Please wait a moment and try again.\";\n            break;\n          default:\n            displayError =\n              clerkError.longMessage ||\n              clerkError.message ||\n              \"Failed to sign in\";\n        }\n      } else {\n        displayError = err instanceof Error ? err.message : \"Failed to sign in\";\n      }\n\n      setError(displayError);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSocialSignIn = async (provider: string) => {\n    if (!isLoaded || !signIn) return;\n\n    setError(\"\");\n    setIsLoading(true);\n\n    try {\n      await signIn.authenticateWithRedirect({\n        strategy: provider as OAuthStrategy,\n        redirectUrl: \"/0-sso-callback\",\n        redirectUrlComplete: \"/0-dashboard\",\n      });\n    } catch (err) {\n      let errorMessage = `Failed to sign in with ${provider.replace(\"oauth_\", \"\")}`;\n\n      if (isClerkAPIResponseError(err)) {\n        const clerkError = err.errors[0];\n        errorMessage =\n          clerkError.longMessage || clerkError.message || errorMessage;\n      } else {\n        errorMessage = err instanceof Error ? err.message : errorMessage;\n      }\n\n      setError(errorMessage);\n      setIsLoading(false);\n    }\n  };\n\n  const getSocialIcon = (provider: string) => {\n    switch (provider) {\n      case \"oauth_github\":\n        return <GitHubLogo className=\"w-4 h-4\" />;\n      case \"oauth_google\":\n        return <GoogleLogo className=\"w-4 h-4\" />;\n      case \"oauth_apple\":\n        return <AppleLogo className=\"w-4 h-4\" />;\n      case \"oauth_linear\":\n        return <LinearLogo className=\"w-4 h-4\" />;\n      case \"oauth_microsoft\":\n        return <MicrosoftLogo className=\"w-4 h-4\" />;\n      case \"oauth_spotify\":\n        return <SpotifyLogo className=\"w-4 h-4\" />;\n      case \"oauth_slack\":\n        return <SlackLogo className=\"w-4 h-4\" />;\n      case \"oauth_twitch\":\n        return <TwitchLogo className=\"w-4 h-4\" />;\n      case \"oauth_twitter\":\n      case \"oauth_x\":\n        return <TwitterLogo className=\"w-4 h-4\" />;\n      case \"oauth_gitlab\":\n        return <GitLabLogo className=\"w-4 h-4\" />;\n      case \"oauth_discord\":\n        return <DiscordLogo className=\"w-4 h-4\" />;\n      case \"oauth_notion\":\n        return <NotionLogo className=\"w-4 h-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getProviderLabel = (provider: string) => {\n    return (\n      provider.replace(\"oauth_\", \"\").charAt(0).toUpperCase() +\n      provider.replace(\"oauth_\", \"\").slice(1)\n    );\n  };\n\n  // Show message if already signed in (for showcase purposes)\n  if (isLoaded && isSignedIn) {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n            <h2 className=\"text-lg font-semibold\">Already Signed In</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              You're currently signed in as {identifier || \"a user\"}\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={() => router.push(\"/0-dashboard\")}\n              className=\"flex-1\"\n            >\n              Go to Dashboard\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={async () => {\n                await clerk.signOut();\n                window.location.reload();\n              }}\n              className=\"flex-1\"\n            >\n              Sign Out & Try\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"flex items-center justify-center py-8\">\n          <LoaderIcon className=\"w-6 h-6 animate-spin\" />\n        </div>\n      </div>\n    );\n  }\n\n  // MFA Step\n  if (state.step === \"mfa\") {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n            <h2 className=\"text-lg font-semibold\">Two-Factor Authentication</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Enter your authentication code\n            </p>\n          </div>\n\n          <form onSubmit={handleMfaSubmit} className=\"space-y-3\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"mfa-code\" className=\"text-sm font-medium\">\n                Authentication Code\n              </Label>\n              <Input\n                id=\"mfa-code\"\n                type=\"text\"\n                value={mfaCode}\n                onChange={(e) => setMfaCode(e.target.value)}\n                placeholder=\"000000\"\n                required\n                disabled={isLoading}\n                maxLength={6}\n                autoComplete=\"one-time-code\"\n              />\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading || mfaCode.length < 6}\n            >\n              {isLoading ? (\n                <>\n                  <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Verifying...\n                </>\n              ) : (\n                \"Verify\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"text-center\">\n            <button\n              type=\"button\"\n              className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              onClick={() => {\n                setState({ step: \"form\" });\n                setMfaCode(\"\");\n                setError(\"\");\n              }}\n              disabled={isLoading}\n            >\n              Back to sign in\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n            <h2 className=\"text-lg font-semibold\">Sign in</h2>\n            <p className=\"text-sm text-muted-foreground\">Welcome back</p>\n          </div>\n\n          {socialProviders.length > 0 && (\n            <div className=\"space-y-3\">\n              {socialProviders.map((provider) => (\n                <Button\n                  key={provider.strategy}\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => handleSocialSignIn(provider.strategy)}\n                  disabled={isLoading}\n                >\n                  {getSocialIcon(provider.strategy)}\n                  <span className=\"ml-2\">\n                    Continue with {getProviderLabel(provider.strategy)}\n                  </span>\n                </Button>\n              ))}\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-card px-2 text-muted-foreground\">Or</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"identifier\" className=\"text-sm font-medium\">\n                {getIdentifierLabel()}\n              </Label>\n              <Input\n                id=\"identifier\"\n                type={getIdentifierInputType()}\n                value={identifier}\n                onChange={(e) => setIdentifier(e.target.value)}\n                placeholder={getIdentifierPlaceholder()}\n                required\n                disabled={isLoading}\n                autoComplete={\n                  getIdentifierType() === \"email\" ? \"email\" : \"username\"\n                }\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"••••••••\"\n                  required\n                  disabled={isLoading}\n                  autoComplete=\"current-password\"\n                  className=\"pr-10\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOffIcon className=\"w-4 h-4 text-muted-foreground\" />\n                  ) : (\n                    <EyeIcon className=\"w-4 h-4 text-muted-foreground\" />\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                \"Sign in\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"text-center\">\n            <button\n              type=\"button\"\n              className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              onClick={() =>\n                signIn?.create({\n                  strategy: \"reset_password_email_code\",\n                  identifier: identifier,\n                })\n              }\n              disabled={!identifier || isLoading}\n            >\n              Forgot your password?\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/elements/clerk/sign-in.tsx"
    },
    {
      "path": "registry/default/elements/clerk/sign-in-shadcn/page.tsx",
      "content": "import { ClerkSignInElement } from \"@/components/elements/clerk/sign-in\";\n\nexport default function SignInTestPage() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-2xl font-bold\">Sign In Test</h1>\n          <p className=\"text-muted-foreground\">\n            Test your sign-in element with Clerk integration\n          </p>\n        </div>\n\n        <div className=\"bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3 text-sm\">\n          <p className=\"font-medium text-amber-800 dark:text-amber-200 mb-1\">\n            ⚠️ Setup Required\n          </p>\n          <p className=\"text-amber-700 dark:text-amber-300 text-xs\">\n            Wrap your root layout with{\" \"}\n            <code className=\"bg-amber-100 dark:bg-amber-900/40 px-1 rounded text-xs\">\n              &lt;ClerkProvider&gt;\n            </code>{\" \"}\n            and configure your API keys for this component to work.\n          </p>\n        </div>\n\n        <ClerkSignInElement />\n\n        <div className=\"text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            Make sure you have configured your Clerk API keys in .env.local\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/sign-in/page.tsx"
    },
    {
      "path": "registry/default/elements/clerk/dashboard/page.tsx",
      "content": "\"use client\";\n\nimport { SignOutButton, useUser } from \"@clerk/nextjs\";\nimport { CheckCircleIcon, LogOutIcon } from \"lucide-react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\nexport default function DashboardPage() {\n  const { user, isLoaded } = useUser();\n\n  if (!isLoaded) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-2\">\n              <h1 className=\"text-xl font-semibold\">Access Denied</h1>\n              <p className=\"text-muted-foreground text-sm\">\n                Please sign in to access the dashboard\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage\n                    src={user.imageUrl}\n                    alt={user.firstName || \"User\"}\n                  />\n                  <AvatarFallback>\n                    {user.firstName?.[0]}\n                    {user.lastName?.[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <CardTitle className=\"text-xl\">\n                    Welcome, {user.firstName || user.username || \"User\"}!\n                  </CardTitle>\n                  <CardDescription>\n                    You successfully signed in with Clerk\n                  </CardDescription>\n                </div>\n              </div>\n              <SignOutButton>\n                <Button variant=\"outline\" size=\"sm\">\n                  <LogOutIcon className=\"w-4 h-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </SignOutButton>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Success Message */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircleIcon className=\"w-6 h-6 text-green-500\" />\n              <div>\n                <h3 className=\"font-semibold text-green-700 dark:text-green-400\">\n                  Authentication Successful\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your Clerk authentication components are working correctly\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>User Information</CardTitle>\n            <CardDescription>Information retrieved from Clerk</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium text-muted-foreground\">Name:</span>\n                <p>\n                  {user.fullName ||\n                    `${user.firstName || \"\"} ${user.lastName || \"\"}`.trim() ||\n                    \"Not provided\"}\n                </p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  Username:\n                </span>\n                <p>{user.username || \"Not provided\"}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  Email:\n                </span>\n                <p>\n                  {user.primaryEmailAddress?.emailAddress || \"Not provided\"}\n                </p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  Phone:\n                </span>\n                <p>{user.primaryPhoneNumber?.phoneNumber || \"Not provided\"}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  User ID:\n                </span>\n                <p className=\"font-mono text-xs\">{user.id}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">\n                  Created:\n                </span>\n                <p>\n                  {user.createdAt\n                    ? new Date(user.createdAt).toLocaleDateString()\n                    : \"Unknown\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Steps */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Next Steps</CardTitle>\n            <CardDescription>\n              Ready to customize your authentication flow\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>\n                  Customize the sign-in and sign-up components to match your\n                  design\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>\n                  Update the redirect URLs in your components to point to your\n                  actual dashboard\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>\n                  Add additional authentication features like organization\n                  management\n                </p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Configure your Clerk webhooks for user management</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/0-dashboard/page.tsx"
    },
    {
      "path": "registry/default/elements/clerk/sso-callback/page.tsx",
      "content": "import { AuthenticateWithRedirectCallback } from \"@clerk/nextjs\";\n\nexport default function SSOCallbackPage() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center space-y-4 p-8\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-muted border-t-primary mx-auto\"></div>\n        <div>\n          <h2 className=\"text-lg font-semibold mb-2\">\n            Completing authentication\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Please wait while we securely sign you in...\n          </p>\n        </div>\n        <AuthenticateWithRedirectCallback\n          signInForceRedirectUrl=\"/0-dashboard\"\n          signUpForceRedirectUrl=\"/0-dashboard\"\n          signInFallbackRedirectUrl=\"/0-dashboard\"\n          signUpFallbackRedirectUrl=\"/0-dashboard\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/sso-callback/page.tsx"
    }
  ],
  "envVars": {
    "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY": "pk_test_",
    "CLERK_SECRET_KEY": "sk_test_"
  },
  "docs": "Complete sign-in form with OAuth providers, MFA support, and error handling using custom ShadCN components. Requires ClerkProvider in root layout."
}
