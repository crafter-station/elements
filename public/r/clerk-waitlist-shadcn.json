{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clerk-waitlist-shadcn",
  "type": "registry:block",
  "title": "Clerk Waitlist (ShadCN)",
  "description": "An animated waitlist signup form with Clerk integration using custom ShadCN components",
  "dependencies": [
    "motion",
    "@clerk/backend",
    "@clerk/nextjs"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "@elements/clerk-middleware"
  ],
  "files": [
    {
      "path": "registry/default/elements/clerk/waitlist-shadcn/waitlist.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"motion/react\";\nimport { useActionState } from \"react\";\nimport { addToWaitlist } from \"./actions\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\ntype WaitlistState = {\n  success?: boolean;\n  error?: string;\n  message?: string;\n};\n\ninterface SubmitButtonProps {\n  isPending?: boolean;\n  disabled?: boolean;\n  children?: React.ReactNode;\n}\n\nfunction SubmitButton({\n  isPending,\n  disabled,\n  children = \"Join Waitlist\",\n}: SubmitButtonProps) {\n  return (\n    <Button\n      type=\"submit\"\n      disabled={isPending || disabled}\n      className=\"px-4 whitespace-nowrap bg-foreground text-background hover:bg-foreground/90 border-0 shadow-sm transition-all hover:shadow-md hover:-translate-y-0.5\"\n    >\n      {isPending ? \"Requesting...\" : children}\n    </Button>\n  );\n}\n\nfunction PixelatedCheckIcon({ className }: { className?: string }) {\n  return (\n    <svg\n      width=\"32\"\n      height=\"32\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      className={className}\n    >\n      <path\n        d=\"M18 6h2v2h-2V6zm-2 4V8h2v2h-2zm-2 2v-2h2v2h-2zm-2 2h2v-2h-2v2zm-2 2h2v-2h-2v2zm-2 0v2h2v-2H8zm-2-2h2v2H6v-2zm0 0H4v-2h2v2z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n}\n\nexport function WaitlistElement() {\n  const [state, formAction, isPending] = useActionState(addToWaitlist, {\n    success: false,\n  } as WaitlistState);\n\n  return (\n    <motion.div\n      className=\"rounded-xl h-[5.5rem] flex items-center justify-center px-4\"\n      animate={{\n        backgroundColor: state.success\n          ? \"hsl(var(--foreground) / 0.05)\"\n          : \"transparent\",\n      }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n    >\n      <div className=\"w-full\">\n        {state.success ? (\n          <motion.div\n            className=\"space-y-3 text-center\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.1, duration: 0.2 }}\n          >\n            <motion.div\n              className=\"flex justify-center\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{\n                delay: 0.15,\n                duration: 0.3,\n                type: \"spring\",\n                stiffness: 300,\n              }}\n            >\n              <PixelatedCheckIcon className=\"w-8 h-8 text-foreground/60\" />\n            </motion.div>\n            <motion.p\n              className=\"text-sm text-foreground/70\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.25, duration: 0.2 }}\n            >\n              {state.message || \"You're in.\"}\n            </motion.p>\n          </motion.div>\n        ) : (\n          <div className=\"space-y-2\">\n            <form\n              action={formAction}\n              className=\"flex flex-col sm:flex-row gap-2\"\n            >\n              <Label htmlFor=\"email\" className=\"sr-only\">\n                Email address\n              </Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                placeholder=\"you@domain.com\"\n                disabled={isPending}\n                autoComplete=\"email\"\n              />\n              <SubmitButton isPending={isPending} />\n            </form>\n\n            {state.error && (\n              <p className=\"text-sm text-destructive text-center\" role=\"alert\">\n                {state.error}\n              </p>\n            )}\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/elements/clerk/waitlist/waitlist.tsx"
    },
    {
      "path": "registry/default/elements/clerk/waitlist-shadcn/actions.ts",
      "content": "\"use server\";\n\nimport { createClerkClient } from \"@clerk/backend\";\n\nconst clerkClient = createClerkClient({ \n  secretKey: process.env.CLERK_SECRET_KEY! \n});\n\ntype WaitlistState = {\n  success?: boolean;\n  error?: string;\n  message?: string;\n};\n\nexport async function addToWaitlist(\n  prevState: WaitlistState,\n  formData: FormData\n): Promise<WaitlistState> {\n  const email = formData.get(\"email\") as string;\n  \n  if (!email || !email.includes(\"@\")) {\n    return { error: \"Please enter a valid email address\" };\n  }\n\n  try {\n    await clerkClient.waitlistEntries.create({\n      emailAddress: email,\n      notify: true\n    });\n\n    return { success: true, message: \"You're on the list.\" };\n  } catch (error: any) {\n    console.error(\"Failed to add to waitlist:\", error);\n    \n    if (error.errors?.[0]?.code === \"form_identifier_exists\") {\n      return { error: \"You're already on the waitlist!\" };\n    }\n    \n    if (error.errors?.[0]?.code === \"form_invalid_email_address\") {\n      return { error: \"Please enter a valid email address\" };\n    }\n    \n    return { error: \"Failed to join waitlist. Please try again.\" };\n  }\n}",
      "type": "registry:lib",
      "target": "components/elements/clerk/waitlist/actions.ts"
    },
    {
      "path": "registry/default/elements/clerk/waitlist-shadcn/page.tsx",
      "content": "import { WaitlistElement } from \"@/components/elements/clerk/waitlist/waitlist\";\n\nexport default function WaitlistTestPage() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-2xl font-bold\">Waitlist Test</h1>\n          <p className=\"text-muted-foreground\">\n            Test your waitlist element with Clerk integration\n          </p>\n        </div>\n\n        <div className=\"bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3 text-sm\">\n          <p className=\"font-medium text-amber-800 dark:text-amber-200 mb-1\">\n            ⚠️ Setup Required\n          </p>\n          <p className=\"text-amber-700 dark:text-amber-300 text-xs\">\n            Wrap your root layout with{\" \"}\n            <code className=\"bg-amber-100 dark:bg-amber-900/40 px-1 rounded text-xs\">\n              &lt;ClerkProvider&gt;\n            </code>{\" \"}\n            and enable waitlist mode in your Clerk dashboard.\n          </p>\n        </div>\n\n        <WaitlistElement />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/waitlist/page.tsx"
    }
  ],
  "docs": "Animated waitlist signup form with Clerk integration using custom ShadCN components. Requires ClerkProvider in root layout and waitlist mode enabled in Clerk dashboard (Configure > Restrictions > Sign-up mode)."
}