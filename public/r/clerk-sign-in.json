{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clerk-sign-in",
  "type": "registry:ui",
  "title": "Clerk Sign In",
  "description": "Complete sign-in form with Clerk integration",
  "dependencies": [
    "@clerk/nextjs",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "alert",
    "card",
    "avatar"
  ],
  "files": [
    {
      "path": "registry/default/elements/clerk/sign-in.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { useSignIn } from \"@clerk/nextjs\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ClerkLogo } from \"@/components/clerk-logo\";\nimport { EyeIcon, EyeOffIcon, LoaderIcon } from \"lucide-react\";\n\nexport function ClerkSignInElement() {\n  const { isLoaded, signIn, setActive } = useSignIn();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const router = useRouter();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isLoaded) return;\n\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const result = await signIn.create({\n        identifier: email,\n        password,\n      });\n\n      if (result.status === \"complete\") {\n        await setActive({ session: result.createdSessionId });\n        router.push(\"/elements/clerk/dashboard\");\n      } else {\n        // Handle multi-factor authentication or other cases\n        setError(\"Sign-in requires additional verification\");\n      }\n    } catch (err: any) {\n      setError(err.errors?.[0]?.message || \"Failed to sign in\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!isLoaded) {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"flex items-center justify-center py-8\">\n          <LoaderIcon className=\"w-6 h-6 animate-spin\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n      <div className=\"space-y-4\">\n        <div className=\"text-center\">\n          <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n          <h2 className=\"text-lg font-semibold\">Sign in</h2>\n          <p className=\"text-sm text-muted-foreground\">Welcome back</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-3\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n              Email\n            </Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"you@company.com\"\n              required\n              disabled={isLoading}\n              autoComplete=\"email\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n              Password\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"••••••••\"\n                required\n                disabled={isLoading}\n                autoComplete=\"current-password\"\n                className=\"pr-10\"\n              />\n              <button\n                type=\"button\"\n                className=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? (\n                  <EyeOffIcon className=\"w-4 h-4 text-muted-foreground\" />\n                ) : (\n                  <EyeIcon className=\"w-4 h-4 text-muted-foreground\" />\n                )}\n              </button>\n            </div>\n          </div>\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? (\n              <>\n                <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                Signing in...\n              </>\n            ) : (\n              \"Sign in\"\n            )}\n          </Button>\n        </form>\n\n        <div className=\"text-center\">\n          <button\n            type=\"button\"\n            className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n            onClick={() =>\n              signIn?.create({\n                strategy: \"reset_password_email_code\",\n                identifier: email,\n              })\n            }\n            disabled={!email || isLoading}\n          >\n            Forgot your password?\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/elements/clerk/sign-in.tsx"
    },
    {
      "path": "registry/default/elements/clerk/sign-in/page.tsx",
      "content": "import { ClerkProvider } from \"@clerk/nextjs\";\nimport { ClerkSignInElement } from \"@/components/elements/clerk/sign-in\";\n\nexport default function SignInTestPage() {\n  return (\n    <ClerkProvider>\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md space-y-6\">\n          <div className=\"text-center space-y-2\">\n            <h1 className=\"text-2xl font-bold\">Sign In Test</h1>\n            <p className=\"text-muted-foreground\">\n              Test your sign-in element with Clerk integration\n            </p>\n          </div>\n\n          <ClerkSignInElement />\n\n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              Make sure you have configured your Clerk API keys\n            </p>\n          </div>\n        </div>\n      </div>\n    </ClerkProvider>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/sign-in/page.tsx"
    },
    {
      "path": "registry/default/elements/clerk/dashboard/page.tsx",
      "content": "\"use client\";\n\nimport { useUser, SignOutButton } from \"@clerk/nextjs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { CheckCircleIcon, LogOutIcon } from \"lucide-react\";\n\nexport default function DashboardPage() {\n  const { user, isLoaded } = useUser();\n\n  if (!isLoaded) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-2\">\n              <h1 className=\"text-xl font-semibold\">Access Denied</h1>\n              <p className=\"text-muted-foreground text-sm\">\n                Please sign in to access the dashboard\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage src={user.imageUrl} alt={user.firstName || \"User\"} />\n                  <AvatarFallback>\n                    {user.firstName?.[0]}{user.lastName?.[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <CardTitle className=\"text-xl\">\n                    Welcome, {user.firstName || \"User\"}!\n                  </CardTitle>\n                  <CardDescription>\n                    You successfully signed in with Clerk\n                  </CardDescription>\n                </div>\n              </div>\n              <SignOutButton>\n                <Button variant=\"outline\" size=\"sm\">\n                  <LogOutIcon className=\"w-4 h-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </SignOutButton>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Success Message */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircleIcon className=\"w-6 h-6 text-green-500\" />\n              <div>\n                <h3 className=\"font-semibold text-green-700 dark:text-green-400\">\n                  Authentication Successful\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your Clerk authentication components are working correctly\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>User Information</CardTitle>\n            <CardDescription>\n              Information retrieved from Clerk\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium text-muted-foreground\">Name:</span>\n                <p>{user.fullName || \"Not provided\"}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">Email:</span>\n                <p>{user.primaryEmailAddress?.emailAddress || \"Not provided\"}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">User ID:</span>\n                <p className=\"font-mono text-xs\">{user.id}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">Created:</span>\n                <p>{user.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"Unknown\"}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Steps */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Next Steps</CardTitle>\n            <CardDescription>\n              Ready to customize your authentication flow\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Customize the sign-in and sign-up components to match your design</p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Update the redirect URLs in your components to point to your actual dashboard</p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Add additional authentication features like organization management</p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Configure your Clerk webhooks for user management</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}",
      "type": "registry:page",
      "target": "app/elements/clerk/dashboard/page.tsx"
    }
  ],
  "docs": "Production-ready sign-in component with email/password authentication, error handling, and proper validation. Includes password visibility toggle and loading states."
}