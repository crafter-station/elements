{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "uploadthing-button",
  "type": "registry:ui",
  "title": "UploadThing Button",
  "description": "Simple upload button with UploadThing integration",
  "dependencies": [
    "uploadthing",
    "@uploadthing/react",
    "@vercel/analytics",
    "sonner"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "packages/uploadthing/registry/uploadthing/core.ts",
      "content": "import { createUploadthing, type FileRouter } from \"uploadthing/next\";\nimport { UploadThingError } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = async (_req: Request) => ({ id: \"demo_user\" }); // Demo auth function\n\nexport const ourFileRouter = {\n  // Image uploader with size and count restrictions\n  imageUploader: f({\n    image: {\n      maxFileSize: \"4MB\",\n      maxFileCount: 4,\n    },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"Upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      return { uploadedBy: metadata.userId };\n    }),\n\n  // PDF document uploader\n  pdfUploader: f({\n    pdf: {\n      maxFileSize: \"16MB\",\n      maxFileCount: 1,\n    },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"PDF upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      return { uploadedBy: metadata.userId };\n    }),\n\n  // Media uploader (images, videos, audio)\n  mediaUploader: f({\n    image: { maxFileSize: \"4MB\" },\n    video: { maxFileSize: \"16MB\" },\n    audio: { maxFileSize: \"8MB\" },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"Media upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      return { uploadedBy: metadata.userId };\n    }),\n\n  // General file uploader\n  fileUploader: f({\n    image: { maxFileSize: \"4MB\" },\n    video: { maxFileSize: \"16MB\" },\n    audio: { maxFileSize: \"8MB\" },\n    pdf: { maxFileSize: \"16MB\" },\n    text: { maxFileSize: \"1MB\" },\n    blob: { maxFileSize: \"32MB\" },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id, timestamp: Date.now() };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"File upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      console.log(\"upload timestamp:\", metadata.timestamp);\n      return { uploadedBy: metadata.userId, timestamp: metadata.timestamp };\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n",
      "type": "registry:lib",
      "target": "app/api/uploadthing/core.ts"
    },
    {
      "path": "packages/uploadthing/registry/uploadthing/route.ts",
      "content": "import { createRouteHandler } from \"uploadthing/next\";\n\nimport { ourFileRouter } from \"./core\";\n\n// Export routes for Next.js App Router\nexport const { GET, POST } = createRouteHandler({\n  router: ourFileRouter,\n\n  // Optional: Configure logging and error handling\n  config: {\n    logLevel: \"Info\",\n  },\n});\n",
      "type": "registry:lib",
      "target": "app/api/uploadthing/route.ts"
    },
    {
      "path": "packages/uploadthing/registry/uploadthing/upload-button.tsx",
      "content": "\"use client\";\n\nimport { generateUploadButton } from \"@uploadthing/react\";\nimport { track } from \"@vercel/analytics\";\n\nimport type { OurFileRouter } from \"./core\";\n\nconst UploadButton = generateUploadButton<OurFileRouter>();\n\ninterface UploadedFile {\n  name: string;\n  size: number;\n  type: string;\n  ufsUrl: string;\n  key: string;\n}\n\ninterface UploadThingButtonProps {\n  endpoint?: keyof OurFileRouter;\n  onUploadComplete?: (files: UploadedFile[]) => void;\n  onUploadError?: (error: Error) => void;\n  className?: string;\n}\n\nexport function UploadThingButton({\n  endpoint = \"imageUploader\",\n  onUploadComplete,\n  onUploadError,\n}: UploadThingButtonProps) {\n  return (\n    <UploadButton\n      endpoint={endpoint}\n      onClientUploadComplete={(res) => {\n        if (res) {\n          const files = res.map((file) => ({\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            ufsUrl: file.ufsUrl,\n            key: file.key,\n          }));\n\n          // Analytics tracking\n          track(\"UploadThing Upload Complete\", {\n            endpoint,\n            files_count: files.length,\n            total_size: files.reduce((acc, file) => acc + file.size, 0),\n            file_types: [...new Set(files.map((f) => f.type))].join(\",\"),\n            source: \"uploadthing_button\",\n            action: \"upload_success\",\n          });\n\n          onUploadComplete?.(files);\n        }\n      }}\n      onUploadError={(error: Error) => {\n        console.error(\"Upload error:\", error);\n\n        // Analytics tracking for errors\n        track(\"UploadThing Upload Error\", {\n          endpoint,\n          error_message: error.message,\n          source: \"uploadthing_button\",\n          action: \"upload_error\",\n        });\n\n        onUploadError?.(error);\n      }}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "components/elements/uploadthing/upload-button.tsx"
    }
  ],
  "envVars": {
    "UPLOADTHING_TOKEN": "ut_...",
    "UPLOADTHING_APP_ID": "your_app_id"
  },
  "docs": "Simple upload button component using UploadThing for basic file uploads with analytics tracking and error handling. Requires UploadThing account and API token.",
  "categories": ["upload", "file", "storage"]
}
