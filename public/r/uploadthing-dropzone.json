{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "uploadthing-dropzone",
  "type": "registry:block",
  "title": "UploadThing Dropzone",
  "description": "Complete file upload solution with drag & drop interface, progress tracking, and cloud storage integration",
  "dependencies": [
    "uploadthing",
    "@uploadthing/react",
    "@vercel/analytics",
    "sonner"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "tabs"
  ],
  "files": [
    {
      "path": "registry/uploadthing/core.ts",
      "content": "import { createUploadthing, type FileRouter } from \"uploadthing/next\";\nimport { UploadThingError } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = async (_req: Request) => ({ id: \"demo_user\" }); // Demo auth function\n\nexport const ourFileRouter = {\n  // Image uploader with size and count restrictions\n  imageUploader: f({\n    image: {\n      maxFileSize: \"4MB\",\n      maxFileCount: 4,\n    },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"Upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      return { uploadedBy: metadata.userId };\n    }),\n\n  // PDF document uploader\n  pdfUploader: f({\n    pdf: {\n      maxFileSize: \"16MB\",\n      maxFileCount: 1,\n    },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"PDF upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      return { uploadedBy: metadata.userId };\n    }),\n\n  // Media uploader (images, videos, audio)\n  mediaUploader: f({\n    image: { maxFileSize: \"4MB\" },\n    video: { maxFileSize: \"16MB\" },\n    audio: { maxFileSize: \"8MB\" },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"Media upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      return { uploadedBy: metadata.userId };\n    }),\n\n  // General file uploader\n  fileUploader: f({\n    image: { maxFileSize: \"4MB\" },\n    video: { maxFileSize: \"16MB\" },\n    audio: { maxFileSize: \"8MB\" },\n    pdf: { maxFileSize: \"16MB\" },\n    text: { maxFileSize: \"1MB\" },\n    blob: { maxFileSize: \"32MB\" },\n  })\n    .middleware(async ({ req }) => {\n      const user = await auth(req);\n      if (!user) throw new UploadThingError(\"Unauthorized\");\n      return { userId: user.id, timestamp: Date.now() };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"File upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      console.log(\"upload timestamp:\", metadata.timestamp);\n      return { uploadedBy: metadata.userId, timestamp: metadata.timestamp };\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n",
      "type": "registry:lib",
      "target": "app/api/uploadthing/core.ts"
    },
    {
      "path": "registry/uploadthing/route.ts",
      "content": "import { createRouteHandler } from \"uploadthing/next\";\n\nimport { ourFileRouter } from \"./core\";\n\n// Export routes for Next.js App Router\nexport const { GET, POST } = createRouteHandler({\n  router: ourFileRouter,\n\n  // Optional: Configure logging and error handling\n  config: {\n    logLevel: \"Info\",\n  },\n});\n",
      "type": "registry:lib",
      "target": "app/api/uploadthing/route.ts"
    },
    {
      "path": "registry/uploadthing/upload-dropzone.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\n\nimport { generateUploadDropzone } from \"@uploadthing/react\";\nimport { track } from \"@vercel/analytics\";\n\nimport type { OurFileRouter } from \"./core\";\n\nconst UploadDropzone = generateUploadDropzone<OurFileRouter>();\n\ninterface UploadedFile {\n  name: string;\n  size: number;\n  type: string;\n  ufsUrl: string;\n  key: string;\n}\n\ninterface UploadThingDropzoneProps {\n  endpoint?: keyof OurFileRouter;\n  onUploadComplete?: (files: UploadedFile[]) => void;\n  onUploadError?: (error: Error) => void;\n  maxFiles?: number;\n  className?: string;\n}\n\nexport function UploadThingDropzone({\n  endpoint = \"imageUploader\",\n  onUploadComplete,\n  onUploadError,\n  maxFiles = 4,\n  className,\n}: UploadThingDropzoneProps) {\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const [_isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  return (\n    <div className={`w-full space-y-4 ${className || \"\"}`}>\n      <div className=\"border-2 border-dashed border-border rounded-lg p-8 transition-colors hover:border-primary/50\">\n        <UploadDropzone\n          endpoint={endpoint}\n          onClientUploadComplete={(res) => {\n            if (res) {\n              const files = res.map((file) => ({\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                ufsUrl: file.ufsUrl,\n                key: file.key,\n              }));\n\n              setUploadedFiles((prev) => [...prev, ...files]);\n\n              // Analytics tracking\n              track(\"UploadThing Upload Complete\", {\n                endpoint,\n                files_count: files.length,\n                total_size: files.reduce((acc, file) => acc + file.size, 0),\n                file_types: [...new Set(files.map((f) => f.type))].join(\",\"),\n                source: \"uploadthing_dropzone\",\n                action: \"upload_success\",\n              });\n\n              onUploadComplete?.(files);\n            }\n            setIsUploading(false);\n            setUploadProgress(0);\n          }}\n          onUploadError={(error: Error) => {\n            console.error(\"Upload error:\", error);\n\n            // Analytics tracking for errors\n            track(\"UploadThing Upload Error\", {\n              endpoint,\n              error_message: error.message,\n              source: \"uploadthing_dropzone\",\n              action: \"upload_error\",\n            });\n\n            onUploadError?.(error);\n            setIsUploading(false);\n            setUploadProgress(0);\n          }}\n          onUploadBegin={(file) => {\n            setIsUploading(true);\n            setUploadProgress(0);\n\n            // Analytics tracking for upload start\n            track(\"UploadThing Upload Begin\", {\n              endpoint,\n              file_name: file,\n              source: \"uploadthing_dropzone\",\n              action: \"upload_begin\",\n            });\n          }}\n          onUploadProgress={(progress) => {\n            setUploadProgress(progress);\n          }}\n          onChange={(acceptedFiles) => {\n            if (acceptedFiles && acceptedFiles.length > maxFiles) {\n              return;\n            }\n\n            if (acceptedFiles && acceptedFiles.length > 0) {\n              // Analytics tracking for file selection\n              track(\"UploadThing Files Selected\", {\n                endpoint,\n                files_count: acceptedFiles.length,\n                file_types: [...new Set(acceptedFiles.map((f) => f.type))].join(\n                  \",\",\n                ),\n                source: \"uploadthing_dropzone\",\n                action: \"files_selected\",\n              });\n            }\n          }}\n          appearance={{\n            container: \"border-none bg-transparent p-0\",\n            uploadIcon: \"text-muted-foreground\",\n            label:\n              \"text-foreground hover:text-primary transition-colors cursor-pointer\",\n            allowedContent: \"text-muted-foreground text-sm\",\n          }}\n          content={{\n            uploadIcon: ({ isUploading }) => {\n              if (isUploading) {\n                return (\n                  <div className=\"w-24 space-y-2\">\n                    <div className=\"w-8 h-8 mx-auto\">\n                      <svg\n                        className=\"w-8 h-8 text-primary\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                        aria-hidden=\"true\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\n                        />\n                      </svg>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className=\"bg-primary h-2 rounded-full transition-all duration-300 ease-out\"\n                        style={{ width: `${uploadProgress}%` }}\n                      />\n                    </div>\n                    <div className=\"text-xs text-center text-muted-foreground\">\n                      {uploadProgress}%\n                    </div>\n                  </div>\n                );\n              }\n              return (\n                <svg\n                  className=\"w-8 h-8\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\n                  />\n                </svg>\n              );\n            },\n            label: ({ ready, isUploading }) => {\n              // Debug: log the actual values\n              console.log(\"UploadThing state:\", { ready, isUploading });\n\n              if (isUploading) return \"Uploading...\";\n              if (ready) return \"Drop files here or click to browse\";\n              return \"Getting ready...\";\n            },\n            allowedContent: ({ ready, fileTypes, isUploading }) => {\n              if (isUploading) return \"Please wait while files are uploading\";\n              if (!ready) return \"Checking what you can upload\";\n              return `Allowed file types: ${fileTypes?.join(\", \") || \"any\"}`;\n            },\n          }}\n        />\n      </div>\n\n      {uploadedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-sm\">Uploaded Files</h4>\n          <div className=\"grid gap-2 max-h-48 overflow-y-auto\">\n            {uploadedFiles.map((file, index) => (\n              <div\n                key={`${file.key}-${index}`}\n                className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg border border-border\"\n              >\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium text-sm truncate\">{file.name}</p>\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                    <span>{(file.size / 1024 / 1024).toFixed(2)} MB</span>\n                    <span>•</span>\n                    <span>{file.type}</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      navigator.clipboard.writeText(file.ufsUrl);\n\n                      // Analytics tracking for URL copy\n                      track(\"UploadThing URL Copy\", {\n                        endpoint,\n                        file_name: file.name,\n                        source: \"uploadthing_dropzone\",\n                        action: \"copy_url\",\n                      });\n                    }}\n                    className=\"p-1 hover:bg-muted rounded text-muted-foreground hover:text-foreground transition-colors\"\n                    title=\"Copy URL\"\n                  >\n                    <svg\n                      className=\"w-4 h-4\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                      aria-hidden=\"true\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\"\n                      />\n                    </svg>\n                  </button>\n                  <a\n                    href={file.ufsUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"p-1 hover:bg-muted rounded text-muted-foreground hover:text-foreground transition-colors\"\n                    title=\"Open file\"\n                    aria-label={`Open ${file.name} in new tab`}\n                    onClick={() => {\n                      // Analytics tracking for file view\n                      track(\"UploadThing File View\", {\n                        endpoint,\n                        file_name: file.name,\n                        source: \"uploadthing_dropzone\",\n                        action: \"view_file\",\n                      });\n                    }}\n                  >\n                    <svg\n                      className=\"w-4 h-4\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                      aria-hidden=\"true\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"\n                      />\n                    </svg>\n                    <span className=\"sr-only\">Open file</span>\n                  </a>\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      setUploadedFiles((prev) =>\n                        prev.filter((_, i) => i !== index),\n                      );\n\n                      // Analytics tracking for file removal\n                      track(\"UploadThing File Remove\", {\n                        endpoint,\n                        file_name: file.name,\n                        source: \"uploadthing_dropzone\",\n                        action: \"remove_file\",\n                      });\n                    }}\n                    className=\"p-1 hover:bg-destructive/10 rounded text-muted-foreground hover:text-destructive transition-colors\"\n                    title=\"Remove from list\"\n                  >\n                    <svg\n                      className=\"w-4 h-4\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                      aria-hidden=\"true\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {uploadedFiles.length > 0 && (\n        <div className=\"flex justify-end\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              setUploadedFiles([]);\n\n              // Analytics tracking for clear all\n              track(\"UploadThing Clear All Files\", {\n                endpoint,\n                files_count: uploadedFiles.length,\n                source: \"uploadthing_dropzone\",\n                action: \"clear_all\",\n              });\n            }}\n            className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            Clear all files\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/elements/uploadthing/upload-dropzone.tsx"
    }
  ],
  "envVars": {
    "UPLOADTHING_TOKEN": "ut_..."
  },
  "docs": "Complete UploadThing file upload suite with drag & drop dropzone interface, progress tracking, and file management. Includes multiple file route configurations (image, PDF, media, general files) with built-in validation, error handling, and analytics tracking. Requires UploadThing account and API token.",
  "categories": [
    "upload",
    "file",
    "storage"
  ]
}