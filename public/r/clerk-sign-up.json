{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clerk-sign-up",
  "type": "registry:ui",
  "title": "Clerk Sign Up",
  "description": "Complete sign-up form with Clerk integration and CAPTCHA support",
  "dependencies": [
    "@clerk/nextjs",
    "@clerk/types"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "alert",
    "@elements/apple-logo",
    "@elements/linear-logo",
    "@elements/microsoft-logo",
    "@elements/github-logo",
    "@elements/spotify-logo",
    "@elements/slack-logo",
    "@elements/twitch-logo",
    "@elements/twitter-logo",
    "@elements/gitlab-logo",
    "@elements/discord-logo",
    "@elements/notion-logo",
    "@elements/google-logo"
  ],
  "files": [
    {
      "path": "registry/default/elements/clerk/sign-up.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useMemo } from \"react\";\nimport { useSignUp, useSignIn } from \"@clerk/nextjs\";\nimport { useRouter } from \"next/navigation\";\nimport type { OAuthStrategy } from \"@clerk/types\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ClerkLogo } from \"@/components/clerk-logo\";\nimport { EyeIcon, EyeOffIcon, LoaderIcon } from \"lucide-react\";\nimport { GitHubLogo } from \"../logos/github\";\nimport { GoogleLogo } from \"../logos/google\";\nimport { AppleLogo } from \"../logos/apple\";\nimport { LinearLogo } from \"../logos/linear\";\nimport { MicrosoftLogo } from \"../logos/microsoft\";\nimport { SpotifyLogo } from \"../logos/spotify\";\nimport { SlackLogo } from \"../logos/slack\";\nimport { TwitchLogo } from \"../logos/twitch\";\nimport { TwitterLogo } from \"../logos/twitter\";\nimport { GitLabLogo } from \"../logos/gitlab\";\nimport { DiscordLogo } from \"../logos/discord\";\nimport { NotionLogo } from \"../logos/notion\";\n\ninterface SignUpState {\n  isLoading?: boolean;\n  error?: string;\n  step?: \"form\" | \"verify\";\n}\n\nexport function ClerkSignUpElement() {\n  const { isLoaded, signUp, setActive } = useSignUp();\n  const { signIn } = useSignIn();\n  const [state, setState] = useState<SignUpState>({ step: \"form\" });\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const router = useRouter();\n\n  // Clear errors after some time\n  useEffect(() => {\n    if (state.error) {\n      const timer = setTimeout(() => \n        setState(prev => ({ ...prev, error: undefined })), 5000\n      );\n      return () => clearTimeout(timer);\n    }\n  }, [state.error]);\n\n  // Initialize signIn to populate supportedFirstFactors (only once)\n  useEffect(() => {\n    if (isLoaded && signIn && !signIn.id && !signIn.supportedFirstFactors && !hasInitialized) {\n      setHasInitialized(true);\n      signIn.create({}).catch((err) => {\n        console.error(\"Failed to initialize signIn:\", err);\n      });\n    }\n  }, [isLoaded, signIn, hasInitialized]);\n\n  const socialProviders = useMemo(() => {\n    if (!signIn?.supportedFirstFactors) return [];\n    return signIn.supportedFirstFactors.filter((factor) =>\n      factor.strategy.startsWith(\"oauth_\"),\n    );\n  }, [signIn?.supportedFirstFactors]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isLoaded || !signUp) return;\n\n    setState((prev) => ({ ...prev, isLoading: true, error: undefined }));\n\n    try {\n      await signUp.create({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        emailAddress: formData.email,\n        password: formData.password,\n      });\n\n      // Send email verification code\n      await signUp.prepareEmailAddressVerification({ strategy: \"email_code\" });\n\n      setState((prev) => ({ ...prev, isLoading: false, step: \"verify\" }));\n    } catch (err: any) {\n      const errorMessage = err.errors?.[0]?.message || \"Failed to create account\";\n      \n      // Handle rate limiting specifically\n      let displayError = errorMessage;\n      if (errorMessage.includes(\"too many requests\") || errorMessage.includes(\"rate limit\")) {\n        displayError = \"Too many attempts. Please wait a moment and try again.\";\n      }\n      \n      setState((prev) => ({\n        ...prev,\n        isLoading: false,\n        error: displayError,\n      }));\n    }\n  };\n\n  const handleVerification = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isLoaded || !signUp) return;\n\n    setState((prev) => ({ ...prev, isLoading: true, error: undefined }));\n\n    try {\n      const result = await signUp.attemptEmailAddressVerification({\n        code: verificationCode,\n      });\n\n      if (result.status === \"complete\") {\n        await setActive({ session: result.createdSessionId });\n        router.push(\"/elements/clerk/dashboard\");\n      } else {\n        setState((prev) => ({\n          ...prev,\n          isLoading: false,\n          error: \"Verification incomplete\",\n        }));\n      }\n    } catch (err: any) {\n      setState((prev) => ({\n        ...prev,\n        isLoading: false,\n        error: err.errors?.[0]?.message || \"Invalid verification code\",\n      }));\n    }\n  };\n\n  const updateFormData = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleSocialSignUp = async (provider: string) => {\n    if (!isLoaded || !signUp) return;\n\n    setState((prev) => ({ ...prev, error: undefined, isLoading: true }));\n    \n    try {\n      await signUp.authenticateWithRedirect({\n        strategy: provider as OAuthStrategy,\n        redirectUrl: \"/elements/clerk/sso-callback\",\n        redirectUrlComplete: \"/elements/clerk/dashboard\",\n      });\n    } catch (err: any) {\n      setState((prev) => ({\n        ...prev,\n        isLoading: false,\n        error:\n          err.errors?.[0]?.message ||\n          `Failed to sign up with ${provider.replace(\"oauth_\", \"\")}`,\n      }));\n    }\n  };\n\n  const getSocialIcon = (provider: string) => {\n    switch (provider) {\n      case \"oauth_github\":\n        return <GitHubLogo className=\"w-4 h-4\" />;\n      case \"oauth_google\":\n        return <GoogleLogo className=\"w-4 h-4\" />;\n      case \"oauth_apple\":\n        return <AppleLogo className=\"w-4 h-4\" />;\n      case \"oauth_linear\":\n        return <LinearLogo className=\"w-4 h-4\" />;\n      case \"oauth_microsoft\":\n        return <MicrosoftLogo className=\"w-4 h-4\" />;\n      case \"oauth_spotify\":\n        return <SpotifyLogo className=\"w-4 h-4\" />;\n      case \"oauth_slack\":\n        return <SlackLogo className=\"w-4 h-4\" />;\n      case \"oauth_twitch\":\n        return <TwitchLogo className=\"w-4 h-4\" />;\n      case \"oauth_twitter\":\n      case \"oauth_x\":\n        return <TwitterLogo className=\"w-4 h-4\" />;\n      case \"oauth_gitlab\":\n        return <GitLabLogo className=\"w-4 h-4\" />;\n      case \"oauth_discord\":\n        return <DiscordLogo className=\"w-4 h-4\" />;\n      case \"oauth_notion\":\n        return <NotionLogo className=\"w-4 h-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getProviderLabel = (provider: string) => {\n    return (\n      provider.replace(\"oauth_\", \"\").charAt(0).toUpperCase() +\n      provider.replace(\"oauth_\", \"\").slice(1)\n    );\n  };\n\n  if (!isLoaded) {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"flex items-center justify-center py-8\">\n          <LoaderIcon className=\"w-6 h-6 animate-spin\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (state.step === \"verify\") {\n    return (\n      <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n            <h2 className=\"text-lg font-semibold\">Verify your email</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              We sent a code to {formData.email}\n            </p>\n          </div>\n\n          <form onSubmit={handleVerification} className=\"space-y-3\">\n            <div className=\"space-y-2\">\n              <Label\n                htmlFor=\"verification-code\"\n                className=\"text-sm font-medium\"\n              >\n                Verification code\n              </Label>\n              <Input\n                id=\"verification-code\"\n                type=\"text\"\n                value={verificationCode}\n                onChange={(e) => setVerificationCode(e.target.value)}\n                placeholder=\"Enter 6-digit code\"\n                required\n                disabled={state.isLoading}\n                maxLength={6}\n                autoComplete=\"one-time-code\"\n              />\n            </div>\n\n            {state.error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{state.error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={state.isLoading || verificationCode.length !== 6}\n            >\n              {state.isLoading ? (\n                <>\n                  <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Verifying...\n                </>\n              ) : (\n                \"Verify\"\n              )}\n            </Button>\n\n            <div className=\"text-center\">\n              <button\n                type=\"button\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                onClick={() =>\n                  signUp?.prepareEmailAddressVerification({\n                    strategy: \"email_code\",\n                  })\n                }\n                disabled={state.isLoading}\n              >\n                Resend code\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-sm mx-auto p-6 border border-border rounded-lg bg-card\">\n      <div className=\"space-y-4\">\n        <div className=\"text-center\">\n          <ClerkLogo className=\"w-8 h-8 mx-auto mb-2\" />\n          <h2 className=\"text-lg font-semibold\">Create account</h2>\n          <p className=\"text-sm text-muted-foreground\">Get started today</p>\n        </div>\n\n        {socialProviders.length > 0 && (\n          <div className=\"space-y-3\">\n            {socialProviders.map((provider) => (\n              <Button\n                key={provider.strategy}\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => handleSocialSignUp(provider.strategy)}\n                disabled={state.isLoading}\n              >\n                {getSocialIcon(provider.strategy)}\n                <span className=\"ml-2\">\n                  Continue with {getProviderLabel(provider.strategy)}\n                </span>\n              </Button>\n            ))}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">Or</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\" className=\"text-sm font-medium\">\n                First name\n              </Label>\n              <Input\n                id=\"firstName\"\n                type=\"text\"\n                value={formData.firstName}\n                onChange={(e) => updateFormData(\"firstName\", e.target.value)}\n                placeholder=\"John\"\n                required\n                disabled={state.isLoading}\n                autoComplete=\"given-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\" className=\"text-sm font-medium\">\n                Last name\n              </Label>\n              <Input\n                id=\"lastName\"\n                type=\"text\"\n                value={formData.lastName}\n                onChange={(e) => updateFormData(\"lastName\", e.target.value)}\n                placeholder=\"Doe\"\n                required\n                disabled={state.isLoading}\n                autoComplete=\"family-name\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n              Email\n            </Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => updateFormData(\"email\", e.target.value)}\n              placeholder=\"you@company.com\"\n              required\n              disabled={state.isLoading}\n              autoComplete=\"email\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n              Password\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={formData.password}\n                onChange={(e) => updateFormData(\"password\", e.target.value)}\n                placeholder=\"••••••••\"\n                required\n                disabled={state.isLoading}\n                autoComplete=\"new-password\"\n                className=\"pr-10\"\n                minLength={8}\n              />\n              <button\n                type=\"button\"\n                className=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? (\n                  <EyeOffIcon className=\"w-4 h-4 text-muted-foreground\" />\n                ) : (\n                  <EyeIcon className=\"w-4 h-4 text-muted-foreground\" />\n                )}\n              </button>\n            </div>\n          </div>\n\n          {state.error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{state.error}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* CAPTCHA Widget - Required for bot protection */}\n          <div id=\"clerk-captcha\" data-cl-theme=\"auto\" />\n\n          <Button type=\"submit\" className=\"w-full\" disabled={state.isLoading}>\n            {state.isLoading ? (\n              <>\n                <LoaderIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                Creating account...\n              </>\n            ) : (\n              \"Create account\"\n            )}\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/elements/clerk/sign-up.tsx"
    },
    {
      "path": "registry/default/elements/clerk/sign-up/page.tsx",
      "content": "import { ClerkProvider } from \"@clerk/nextjs\";\nimport { ClerkSignUpElement } from \"@/components/elements/clerk/sign-up\";\n\nexport default function SignUpTestPage() {\n  return (\n    <ClerkProvider>\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md space-y-6\">\n          <div className=\"text-center space-y-2\">\n            <h1 className=\"text-2xl font-bold\">Sign Up Test</h1>\n            <p className=\"text-muted-foreground\">\n              Test your sign-up element with Clerk integration\n            </p>\n          </div>\n\n          <ClerkSignUpElement />\n\n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              Make sure you have configured your Clerk API keys\n            </p>\n          </div>\n        </div>\n      </div>\n    </ClerkProvider>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/elements/clerk/sign-up/page.tsx"
    },
    {
      "path": "registry/default/elements/clerk/dashboard/page.tsx",
      "content": "\"use client\";\n\nimport { useUser, SignOutButton } from \"@clerk/nextjs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { CheckCircleIcon, LogOutIcon } from \"lucide-react\";\n\nexport default function DashboardPage() {\n  const { user, isLoaded } = useUser();\n\n  if (!isLoaded) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-2\">\n              <h1 className=\"text-xl font-semibold\">Access Denied</h1>\n              <p className=\"text-muted-foreground text-sm\">\n                Please sign in to access the dashboard\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage src={user.imageUrl} alt={user.firstName || \"User\"} />\n                  <AvatarFallback>\n                    {user.firstName?.[0]}{user.lastName?.[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <CardTitle className=\"text-xl\">\n                    Welcome, {user.firstName || \"User\"}!\n                  </CardTitle>\n                  <CardDescription>\n                    You successfully signed in with Clerk\n                  </CardDescription>\n                </div>\n              </div>\n              <SignOutButton>\n                <Button variant=\"outline\" size=\"sm\">\n                  <LogOutIcon className=\"w-4 h-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </SignOutButton>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Success Message */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircleIcon className=\"w-6 h-6 text-green-500\" />\n              <div>\n                <h3 className=\"font-semibold text-green-700 dark:text-green-400\">\n                  Authentication Successful\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your Clerk authentication components are working correctly\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>User Information</CardTitle>\n            <CardDescription>\n              Information retrieved from Clerk\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium text-muted-foreground\">Name:</span>\n                <p>{user.fullName || \"Not provided\"}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">Email:</span>\n                <p>{user.primaryEmailAddress?.emailAddress || \"Not provided\"}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">User ID:</span>\n                <p className=\"font-mono text-xs\">{user.id}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-muted-foreground\">Created:</span>\n                <p>{user.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"Unknown\"}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Steps */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Next Steps</CardTitle>\n            <CardDescription>\n              Ready to customize your authentication flow\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Customize the sign-in and sign-up components to match your design</p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Update the redirect URLs in your components to point to your actual dashboard</p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Add additional authentication features like organization management</p>\n              </div>\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2\"></div>\n                <p>Configure your Clerk webhooks for user management</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}",
      "type": "registry:page",
      "target": "app/elements/clerk/dashboard/page.tsx"
    },
    {
      "path": "registry/default/elements/clerk/sso-callback/page.tsx",
      "content": "import { AuthenticateWithRedirectCallback } from \"@clerk/nextjs\";\n\nexport default function SSOCallbackPage() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center space-y-4 p-8\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-muted border-t-primary mx-auto\"></div>\n        <div>\n          <h2 className=\"text-lg font-semibold mb-2\">Completing authentication</h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Please wait while we securely sign you in...\n          </p>\n        </div>\n        <AuthenticateWithRedirectCallback\n          signInForceRedirectUrl=\"/elements/clerk/dashboard\"\n          signUpForceRedirectUrl=\"/elements/clerk/dashboard\"\n          signInFallbackRedirectUrl=\"/elements/clerk/sign-in\"\n          signUpFallbackRedirectUrl=\"/elements/clerk/sign-up\"\n        />\n      </div>\n    </div>\n  );\n}",
      "type": "registry:page",
      "target": "app/elements/clerk/sso-callback/page.tsx"
    }
  ],
  "docs": "Production-ready sign-up component with first name, last name, email, and password fields. Includes OAuth social providers, email verification flow, CAPTCHA support for bot protection, SSO callback handling, and comprehensive error handling."
}